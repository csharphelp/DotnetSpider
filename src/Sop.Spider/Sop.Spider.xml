<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sop.DotnetSpider</name>
    </assembly>
    <members>
        <member name="T:Sop.Spider.Analyzer.DataParser">
            <summary>
            默认数据解析器
            <code></code>
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.DataParserBase">
            <summary>
            数据解析器
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.DataParserBase.Required">
            <summary>
            判断当前请求是否可以解析
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.DataParserBase.GetFollowRequests">
            <summary>
            查询当前请求的下一级请求
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.DataParserBase.SelectableFactory">
            <summary>
            选择器的生成方法
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.DataParserBase.HandleAsync(Sop.Spider.DataStorage.DataFlowContext)">
            <summary>
            数据解析
            </summary>
            <param name="context">处理上下文</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.DataParserBase.CreateFromRequest(Sop.Spider.Download.Request,System.String)">
            <summary>
            创建当前请求的下一级请求
            </summary>
            <param name="current">当前请求</param>
            <param name="url">下一级请求</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.DataParserBase.Parse(Sop.Spider.DataStorage.DataFlowContext)">
            <summary>
            数据解析
            </summary>
            <param name="context">处理上下文</param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.Analyzer.DataParserHelper">
            <summary>
            数据解析相关的帮助文件
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.DataParserHelper.QueryFollowRequestsByXPath(System.String[])">
            <summary>
            通过 XPATH 查找链接
            </summary>
            <param name="xPaths"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.DataParserHelper.CheckIfRequiredByRegex(System.String[])">
            <summary>
            通过正则判断是否可以解析
            </summary>
            <param name="patterns">正则表达式</param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.Analyzer.DataParser`1">
            <summary>
            实体解析器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Sop.Spider.Analyzer.DataParser`1.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.DataParser`1.Parse(Sop.Spider.DataStorage.DataFlowContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.DataParser`1.ParseObject(System.Collections.Generic.Dictionary{System.String,System.String},Sop.Spider.Analyzer.ISelectable,System.Int32)">
            <summary>
            
            </summary>
            <param name="environments"></param>
            <param name="selectable"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.Analyzer.CharacterCaseFormatAttribute">
            <summary>
            字符串大写化或者小写化
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.CharacterCaseFormatAttribute.ToUpper">
            <summary>
            如果为 True 则把数据大写化, 如果为 False 则表数据小写化
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.CharacterCaseFormatAttribute.FormatValue(System.String)">
            <summary>
            实现数值的转化
            </summary>
            <param name="value">数值</param>
            <returns>被格式化后的数值</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.CharacterCaseFormatAttribute.CheckArguments">
            <summary>
            校验参数是否设置正确
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.CutoutFormatBaseAttribute">
            <summary>
            截取数值
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.CutoutFormatBaseAttribute.StartPart">
            <summary>
            起始部分的内容
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.CutoutFormatBaseAttribute.EndPart">
            <summary>
            结束部分的内容
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.CutoutFormatBaseAttribute.StartOffset">
            <summary>
            开始截取的偏移
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.CutoutFormatBaseAttribute.EndOffset">
            <summary>
            结束截取的偏移
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.CutoutFormatBaseAttribute.FormatValue(System.String)">
            <summary>
            实现数值的转化
            </summary>
            <param name="value">数值</param>
            <returns>被格式化后的数值</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.CutoutFormatBaseAttribute.CheckArguments">
            <summary>
            校验参数是否设置正确
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.DeCodeEnCodeFormatAttribute">
            <summary>
            把数值进行HTML解码
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.DeCodeEnCodeFormatAttribute.FormatValue(System.String)">
            <summary>
            实现数值的转化
            </summary>
            <param name="value">数值</param>
            <returns>被格式化后的数值</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.DeCodeEnCodeFormatAttribute.CheckArguments">
            <summary>
            校验参数是否设置正确
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.DigitUnitFormatAttribute">
            <summary>
            中文转数字
            把包含中文的字符串转化成数字
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.DigitUnitFormatAttribute.NumberFormat">
            <summary>
            数字格式化模版
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.DigitUnitFormatAttribute.FormatValue(System.String)">
            <summary>
            把包含中文的字符串转化成数字
            </summary>
            <param name="value">数值</param>
            <returns>被格式化后的数值</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.DigitUnitFormatAttribute.CheckArguments">
            <summary>
            校验参数是否设置正确
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.DisplaceFormatAttribute">
            <summary>
            如果值等于EqualValue, 则返回Displacement. 比如用于: 采集的结果为: 是, 转化为 False
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.DisplaceFormatAttribute.EqualValue">
            <summary>
            比较的值
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.DisplaceFormatAttribute.Displacement">
            <summary>
            最终替换的值
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.DisplaceFormatAttribute.FormatValue(System.String)">
            <summary>
            实现数值的转化
            </summary>
            <param name="value">数值</param>
            <returns>被格式化后的数值</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.DisplaceFormatAttribute.CheckArguments">
            <summary>
            校验参数是否设置正确
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.DownloadFormatAttribute">
            <summary>
            下载内容
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.DownloadFormatAttribute.DownloadFile">
            <summary>
            下载文件类型
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.DownloadFormatAttribute.FileExtension">
            <summary>
            
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.DownloadFormatAttribute.FileStorageType">
            <summary>
            存储路径位置
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.DownloadFormatAttribute.FormatValue(System.String)">
            <summary>
            执行下载操作
            </summary>
            <param name="value">下载的链接</param>
            <returns>下载完成后的文件名</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.DownloadFormatAttribute.DownFile(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="fileUrl"></param>
            <param name="fileNamePath"></param>
        </member>
        <member name="M:Sop.Spider.Analyzer.DownloadFormatAttribute.CheckArguments">
            <summary>
            校验参数是否设置正确
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.FormatBaseAttribute">
            <summary>
            数据格式化属性的基类
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.FormatBaseAttribute.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.FormatBaseAttribute.Logger">
            <summary>
            
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.FormatBaseAttribute.Name">
            <summary>
            格式化的名称
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.FormatBaseAttribute.ValueWhenNull">
            <summary>
            默认属性，如果被格式化的值为空的返回值
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.FormatBaseAttribute.FormatValue(System.String)">
            <summary>
            实现数值的转化
            </summary>
            <param name="value">数值</param>
            <returns>被格式化后的数值</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.FormatBaseAttribute.CheckArguments">
            <summary>
            校验参数是否设置正确
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.FormatBaseAttribute.Format(System.String)">
            <summary>
            格式化数据
            </summary>
            <param name="value">数值</param>
            <returns>被格式化后的数值</returns>
        </member>
        <member name="T:Sop.Spider.Analyzer.RegexAppendFormatAttribute">
            <summary>
            正则追加更是发处理器
            如果数值符合正则表达式则在数值后面追加指定的内容. 如采集到的内容为数字, 则在后面添加 "人"
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.RegexAppendFormatAttribute.Pattern">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.RegexAppendFormatAttribute.AppendValue">
            <summary>
            追加的内容
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.RegexAppendFormatAttribute.FormatValue(System.String)">
            <summary>
            实现数值的转化
            </summary>
            <param name="value">数值</param>
            <returns>被格式化后的数值</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.RegexAppendFormatAttribute.CheckArguments">
            <summary>
            校验参数是否设置正确
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.RegexFormatAttribute">
            <summary>
            正则匹配格式化处理器
            如果能匹配正则表达式则返回True的内容, 如果不符合正则表达式则返回 False的内容
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.RegexFormatAttribute.Pattern">
            <summary>
            正则表达式格式化
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.RegexFormatAttribute.True">
            <summary>
            符合正则表达式应该返回的内容
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.RegexFormatAttribute.False">
            <summary>
            不符合正则表达式应该返回的内容
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.RegexFormatAttribute.Group">
            <summary>
            如果 True没有设值, 则返回正则表达式匹配的 Group 内容
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.RegexFormatAttribute.FormatValue(System.String)">
            <summary>
            实现数值的转化
            </summary>
            <param name="value">数值</param>
            <returns>被格式化后的数值</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.RegexFormatAttribute.CheckArguments">
            <summary>
            校验参数是否设置正确
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.RegexReplaceFormatAttribute">
            <summary>
             正则格式化属性
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.RegexReplaceFormatAttribute.Expression">
            <summary>
            表达式
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.RegexReplaceFormatAttribute.RegexOptions">
            <summary>
            忽略比较
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.RegexReplaceFormatAttribute.NewValue">
            <summary>
            要替换的新值
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.RegexReplaceFormatAttribute.FormatValue(System.String)">
            <summary>
            实现数值的转化
            </summary>
            <param name="value">数值</param>
            <returns>被格式化后的数值</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.RegexReplaceFormatAttribute.CheckArguments">
            <summary>
            校验参数是否设置正确
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.ReplaceFormatAttribute">
            <summary>
            Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.ReplaceFormatAttribute.OldValue">
            <summary>
            需要被替换的值
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.ReplaceFormatAttribute.NewValue">
            <summary>
            The string to replace all occurrences of oldValue.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.ReplaceFormatAttribute.FormatValue(System.String)">
            <summary>
            实现数值的转化
            </summary>
            <param name="value">数值</param>
            <returns>被格式化后的数值</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.ReplaceFormatAttribute.CheckArguments">
            <summary>
            校验参数是否设置正确
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.SplitFormatAttribute">
            <summary>
            截取格式化
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.SplitFormatAttribute.Separator">
            <summary>
             A string array that delimits the substrings in this string, an empty array that contains no delimiters, or null.
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.SplitFormatAttribute.ElementAt">
            <summary>
            分割数值后需要返回的数值索引
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.SplitFormatAttribute.FormatValue(System.String)">
            <summary>
            实现数值的转化
            </summary>
            <param name="value">数值</param>
            <returns>被格式化后的数值</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.SplitFormatAttribute.CheckArguments">
            <summary>
            校验参数是否设置正确
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.StringFormatAttribute">
            <summary>
            Replaces one or more format items in a specified string with the string representation of a specified object.
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.StringFormatAttribute.FormatStr">
            <summary>
            A composite format string.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.StringFormatAttribute.FormatValue(System.String)">
            <summary>
            实现数值的转化
            </summary>
            <param name="value">数值</param>
            <returns>被格式化后的数值</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.StringFormatAttribute.CheckArguments">
            <summary>
            校验参数是否设置正确
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.TimeStampFormatAttribute">
            <summary>
            把Unix时间转换成DateTime
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.TimeStampFormatAttribute.FormatValue(System.String)">
            <summary>
            实现数值的转化
            </summary>
            <param name="value">数值</param>
            <returns>被格式化后的数值</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.TimeStampFormatAttribute.CheckArguments">
            <summary>
            校验参数是否设置正确
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.TrimFormatAttribute">
            <summary>
            Removes all leading and trailing white-space characters from the current System.String object.
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.TrimFormatAttribute.Type">
            <summary>
            Trim 类型
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.TrimFormatAttribute.FormatValue(System.String)">
            <summary>
            实现数值的转化
            </summary>
            <param name="value">数值</param>
            <returns>被格式化后的数值</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.TrimFormatAttribute.CheckArguments">
            <summary>
            校验参数是否设置正确
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeExtensions">
            <summary>
            HtmlNode extension methods.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeExtensions.IsElement(HtmlAgilityPack.HtmlNode)">
            <summary>
            Determines whether this node is an element or not.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeExtensions.Elements(System.Collections.Generic.IEnumerable{HtmlAgilityPack.HtmlNode})">
            <summary>
            Returns a collection of elements from this collection.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeExtensions.Children(HtmlAgilityPack.HtmlNode)">
            <summary>
            Returns a collection of child nodes of this node.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeExtensions.Elements(HtmlAgilityPack.HtmlNode)">
            <summary>
            Returns a collection of child elements of this node.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeExtensions.ElementsAfterSelf(HtmlAgilityPack.HtmlNode)">
            <summary>
            Returns a collection of the sibling elements after this node.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeExtensions.NodesAfterSelf(HtmlAgilityPack.HtmlNode)">
            <summary>
            Returns a collection of the sibling nodes after this node.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeExtensions.ElementsBeforeSelf(HtmlAgilityPack.HtmlNode)">
            <summary>
            Returns a collection of the sibling elements before this node.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeExtensions.NodesBeforeSelf(HtmlAgilityPack.HtmlNode)">
            <summary>
            Returns a collection of the sibling nodes before this node.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeExtensions.DescendantsAndSelf(HtmlAgilityPack.HtmlNode)">
            <summary>
            Returns a collection of nodes that contains this element 
            followed by all descendant nodes of this element.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeExtensions.Descendants(HtmlAgilityPack.HtmlNode)">
            <summary>
            Returns a collection of all descendant nodes of this element.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeExtensions.GetBeginTagString(HtmlAgilityPack.HtmlNode)">
            <summary>
            Returns a begin tag, including attributes, string 
            representation of this element.
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeOps">
            <summary>
            An <see cref="T:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1"/> implementation for <see cref="T:HtmlAgilityPack.HtmlNode"/>
            from <a href="http://www.codeplex.com/htmlagilitypack">HtmlAgilityPack</a>.
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeSelection">
            <summary>
            Selector API for <see cref="T:HtmlAgilityPack.HtmlNode"/>.
            </summary>
            <remarks>
            For more information, see <a href="http://www.w3.org/TR/selectors-api/">Selectors API</a>.
            </remarks>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeSelection.QuerySelector(HtmlAgilityPack.HtmlNode,System.String)">
            <summary>
            Similar to <see cref="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeSelection.QuerySelectorAll(HtmlAgilityPack.HtmlNode,System.String)" /> 
            except it returns only the first element matching the supplied 
            selector strings.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeSelection.QuerySelectorAll(HtmlAgilityPack.HtmlNode,System.String)">
            <summary>
            Retrieves all element nodes from descendants of the starting 
            element node that match any selector within the supplied 
            selector strings. 
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeSelection.QuerySelectorAll(HtmlAgilityPack.HtmlNode,System.String,System.Func{System.String,System.Func{HtmlAgilityPack.HtmlNode,System.Collections.Generic.IEnumerable{HtmlAgilityPack.HtmlNode}}})">
            <summary>
            Retrieves all element nodes from descendants of the starting 
            element node that match any selector within the supplied 
            selector strings. An additional parameter specifies a 
            particular compiler to use for parsing and compiling the 
            selector.
            </summary>
            <remarks>
            The <paramref name="compiler"/> can be <c>null</c>, in which
            case a default compiler is used. If the selector is to be used
            often, it is recommended to use a caching compiler such as the
            one supplied by <see cref="!:CreateCachingCompiler()"/>.
            </remarks>
        </member>
        <member name="P:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeSelection.CacheSize">
            <summary>
            Gets or sets the maximum number of compiled selectors that will be kept in cache.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeSelection.Compile(System.String)">
            <summary>
            Parses and compiles CSS selector text into run-time function.
            </summary>
            <remarks>
            Use this method to compile and reuse frequently used CSS selectors
            without parsing them each time.
            </remarks>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.HtmlNodeSelection.CachableCompile(System.String)">
            <summary>
            Compiles a selector. If the selector has been previously 
            compiled then this method returns it rather than parsing
            and compiling the selector on each invocation.
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1">
            <summary>
            Represents a selectors implementation for an arbitrary document/node system.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.Type(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#type-selectors">type selector</a>,
            which represents an instance of the element type in the document tree. 
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.Universal(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#universal-selector">universal selector</a>,
            any single element in the document tree in any namespace 
            (including those without a namespace) if no default namespace 
            has been specified for selectors. 
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.Id(System.String)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#Id-selectors">ID selector</a>,
            which represents an element instance that has an identifier that 
            matches the identifier in the ID selector.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.Class(System.String)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#class-html">class selector</a>,
            which is an alternative <see cref="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.AttributeIncludes(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String,System.String)"/> when 
            representing the <c>class</c> attribute. 
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.AttributeExists(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>
            whatever the values of the attribute.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.AttributeExact(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>
            and whose value is exactly <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.AttributeIncludes(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>
            and whose value is a whitespace-separated list of words, one of 
            which is exactly <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.AttributeRegexMatch(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element whose the given attribute <paramref name="name"/>
            has a value that matches the specified regex.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.AttributeDashMatch(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>,
            its value either being exactly <paramref name="value"/> or beginning 
            with <paramref name="value"/> immediately followed by "-" (U+002D).
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.AttributePrefixMatch(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the attribute <paramref name="name"/> 
            whose value begins with the prefix <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.AttributeSuffixMatch(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the attribute <paramref name="name"/> 
            whose value ends with the suffix <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.AttributeSubstring(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the attribute <paramref name="name"/> 
            whose value contains at least one instance of the substring <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.AttributeNotEqual(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element without the given attribute <paramref name="name"/>
            or with a different value. <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.FirstChild">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the first child of some other element.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.LastChild">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the last child of some other element.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.NthChild(System.Int32,System.Int32)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the N-th child of some other element.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.OnlyChild">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that has a parent element and whose parent 
            element has no other element children.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.Empty">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that has no children at all.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.Child">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which represents a childhood relationship between two elements.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.Descendant">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which represents a relationship between two elements where one element is an 
            arbitrary descendant of some ancestor element.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.Adjacent">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which represents elements that share the same parent in the document tree and 
            where the first element immediately precedes the second element.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.GeneralSibling">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which separates two sequences of simple selectors. The elements represented
            by the two sequences share the same parent in the document tree and the
            element represented by the first sequence precedes (not necessarily
            immediately) the element represented by the second one.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.NthLastChild(System.Int32,System.Int32)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the N-th child from bottom up of some other element.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.Eq(System.Int32)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents the N-th matched element (zero-based).
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.Has(Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that contains an element that matches the specified query.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.Not(Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that does not match the specified query.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.SelectParent">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents the parents of the matched elements.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.Contains(System.String)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that contains the specified text.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.Matches(System.String)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element whose text content matches the specified regex.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.IElementOps`1.Last">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents the last matched element.
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator">
            <summary>
            Represent an implementation that is responsible for generating
            an implementation for a selector.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.OnInit">
            <summary>
            Delimits the initialization of a generation.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.OnClose">
            <summary>
            Delimits the closing/conclusion of a generation.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.OnSelector">
            <summary>
            Delimits a selector generation in a group of selectors.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.Type(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#type-selectors">type selector</a>,
            which represents an instance of the element type in the document tree. 
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.Universal(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#universal-selector">universal selector</a>,
            any single element in the document tree in any namespace 
            (including those without a namespace) if no default namespace 
            has been specified for selectors. 
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.Id(System.String)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#Id-selectors">ID selector</a>,
            which represents an element instance that has an identifier that 
            matches the identifier in the ID selector.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.Class(System.String)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#class-html">class selector</a>,
            which is an alternative <see cref="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.AttributeIncludes(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String,System.String)"/> when 
            representing the <c>class</c> attribute. 
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.AttributeExists(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>
            whatever the values of the attribute.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.AttributeExact(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>
            and whose value is exactly <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.AttributeNotEqual(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element without the given attribute <paramref name="name"/>
            or with a different value <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.AttributeIncludes(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>
            and whose value is a whitespace-separated list of words, one of 
            which is exactly <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.AttributeRegexMatch(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element whose the given attribute <paramref name="name"/>
            has a value that matches the specified regex.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.AttributeDashMatch(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>,
            its value either being exactly <paramref name="value"/> or beginning 
            with <paramref name="value"/> immediately followed by "-" (U+002D).
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.AttributePrefixMatch(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the attribute <paramref name="name"/> 
            whose value begins with the prefix <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.AttributeSuffixMatch(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the attribute <paramref name="name"/> 
            whose value ends with the suffix <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.AttributeSubstring(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the attribute <paramref name="name"/> 
            whose value contains at least one instance of the substring <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.FirstChild">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the first child of some other element.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.LastChild">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the last child of some other element.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.NthChild(System.Int32,System.Int32)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the N-th child of some other element.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.OnlyChild">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that has a parent element and whose parent 
            element has no other element children.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.Empty">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that has no children at all.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.Eq(System.Int32)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents the N-th matched element.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.Has(Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that contains an element that matches the query specified by the argument.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.SplitAfter(Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            that selects chunks of nodes based on the specified splitter selector (ignoring the content before the first separator)
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.SplitBefore(Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            that selects chunks of nodes based on the specified splitter selector (ignoring the content after the last separator)
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.SplitBetween(Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            that selects chunks of nodes based on the specified splitter selector (ignoring the content before the first separator and after the last separator)
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.SplitAll(Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            that selects chunks of nodes based on the specified splitter selector (including the content before the first separator and after the last separator)
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.Before(Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            that selects the nodes before a specified node, grouped into a single node
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.After(Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            that selects the nodes after a specified node, grouped into a single node
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.Between(Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator,Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            that selects the nodes between two specified nodes, grouped in a single node
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.Not(Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that does not match the specified selector.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.SelectParent">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents the parents of each matched element.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.Contains(System.String)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that contains the specified text.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.Matches(System.String)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element whose text content matches the specified regex.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.CustomSelector(System.Object)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents a user-defined selector.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.Child">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which represents a childhood relationship between two elements.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.Descendant">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which represents a relationship between two elements where one element is an 
            arbitrary descendant of some ancestor element.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.Adjacent">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which represents elements that share the same parent in the document tree and 
            where the first element immediately precedes the second element.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.GeneralSibling">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which separates two sequences of simple selectors. The elements represented
            by the two sequences share the same parent in the document tree and the
            element represented by the first sequence precedes (not necessarily
            immediately) the element represented by the second one.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.NthLastChild(System.Int32,System.Int32)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the N-th child from bottom up of some other element.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.CreateNew">
            <summary>
            Creates an empty instance of the same type of the current generator.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.ISelectorGenerator.Last">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents the last matched element.
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix">
            <summary>
            Represent a type or attribute name.
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix.None">
            <summary>
            Represents a name from either the default or any namespace 
            in a target document, depending on whether a default namespace is
            in effect or not.
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix.Empty">
            <summary>
            Represents an empty namespace.
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix.Any">
            <summary>
            Represents any namespace.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix.#ctor(System.String)">
            <summary>
            Initializes an instance with a namespace prefix specification.
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix.Text">
            <summary>
            Gets the raw text value of this instance.
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix.IsNone">
            <summary>
            Indicates whether this instance represents a name
            from either the default or any namespace in a target
            document, depending on whether a default namespace is
            in effect or not.
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix.IsAny">
            <summary>
            Indicates whether this instance represents a name
            from any namespace (including one without one)
            in a target document.
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix.IsEmpty">
            <summary>
            Indicates whether this instance represents a name
            without a namespace in a target document.
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix.IsSpecific">
            <summary>
            Indicates whether this instance represents a name from a 
            specific namespace or not.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix.Equals(Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix)">
            <summary>
            Indicates whether this instance and another are equal.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.NamespacePrefix.Format(System.String)">
            <summary>
            Formats this namespace together with a name.
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Parser">
            <summary>
            Semantic parser for CSS selector grammar.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Parser.Parse``1(System.String,``0)">
            <summary>
            Parses a CSS selector group and generates its implementation.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Parser.Parse``2(System.String,``0,System.Func{``0,``1})">
            <summary>
            Parses a CSS selector group and generates its implementation.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Parser.Parse``1(System.Collections.Generic.IEnumerable{Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token},``0)">
            <summary>
            Parses a tokenized stream representing a CSS selector group and 
            generates its implementation.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Parser.Parse``2(System.Collections.Generic.IEnumerable{Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token},``0,System.Func{``0,``1})">
            <summary>
            Parses a tokenized stream representing a CSS selector group and 
            generates its implementation.
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Reader`1">
            <summary>
            Adds reading semantics to a base <see cref="T:System.Collections.Generic.IEnumerator`1"/> with the 
            option to un-read and insert new elements while consuming the source.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Reader`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initialize a new <see cref="T:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Reader`1"/> with a base
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> object.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Reader`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Initialize a new <see cref="T:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Reader`1"/> with a base
            <see cref="T:System.Collections.Generic.IEnumerator`1"/> object.
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Reader`1.HasMore">
            <summary>
            Indicates whether there is, at least, one value waiting to be read or not.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Reader`1.Unread(`0)">
            <summary>
            Pushes back a new value that will be returned on the next read.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Reader`1.Read">
            <summary>
            Reads and returns the next value.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Reader`1.Peek">
            <summary>
            Peeks the next value waiting to be read.
            </summary>
            <exception cref="T:Sop.Spider.SpiderInvalidOperationException">
            Thrown if there is no value waiting to be read.
            </exception>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Reader`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the remaining
            values to be read.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Reader`1.Close">
            <summary>
            Disposes the enumerator used to initialize this object
            if that enumerator supports <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Selector`1">
            <summary>
            Represents a selector implementation over an arbitrary type of elements.
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.HtmlAgilityPack.Css.SelectorGenerator`1">
            <summary>
            A selector generator implementation for an arbitrary document/element system.
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token">
            <summary>
            Represent a token and optionally any text associated with it.
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Kind">
            <summary>
            Gets the kind/type/class of the token.
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Text">
            <summary>
            Gets text, if any, associated with the token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Eoi">
            <summary>
            Creates an end-of-input token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Star">
            <summary>
            Creates a star token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Dot">
            <summary>
            Creates a dot token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Colon">
            <summary>
            Creates a colon token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Comma">
            <summary>
            Creates a comma token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Semicolon">
            <summary>
            Creates a comma token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.RightParenthesis">
            <summary>
            Creates a right parenthesis token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Equals">
            <summary>
            Creates an equals token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.NotEqual">
            <summary>
            Creates a not-equals token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.LeftBracket">
            <summary>
            Creates a left bracket token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.RightBracket">
            <summary>
            Creates a right bracket token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Pipe">
            <summary>
            Creates a pipe (vertical line) token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Plus">
            <summary>
            Creates a plus token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Greater">
            <summary>
            Creates a greater token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Includes">
            <summary>
            Creates an includes token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.RegexMatch">
            <summary>
            Creates a regex match token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.DashMatch">
            <summary>
            Creates a dash-match token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.PrefixMatch">
            <summary>
            Creates a prefix-match token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.SuffixMatch">
            <summary>
            Creates a suffix-match token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.SubstringMatch">
            <summary>
            Creates a substring-match token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Tilde">
            <summary>
            Creates a general sibling token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Slash">
            <summary>
            Creates a general slash token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Ident(System.String)">
            <summary>
            Creates an identifier token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Integer(System.String)">
            <summary>
            Creates an integer token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Hash(System.String)">
            <summary>
            Creates a hash-name token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.WhiteSpace(System.String)">
            <summary>
            Creates a white-space token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.String(System.String)">
            <summary>
            Creates a string token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Function(System.String)">
            <summary>
            Creates a function token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Char(System.Char)">
            <summary>
            Creates an arbitrary character token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.Equals(Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.ToString">
            <summary>
            Gets a string representation of the token.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.op_Equality(Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token,Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token)">
            <summary>
            Performs a logical comparison of the two tokens to determine 
            whether they are equal. 
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token.op_Inequality(Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token,Sop.Spider.Analyzer.HtmlAgilityPack.Css.Token)">
            <summary>
            Performs a logical comparison of the two tokens to determine 
            whether they are inequal. 
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Tokener">
            <summary>
            Lexer for tokens in CSS selector grammar.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Tokener.Tokenize(System.IO.TextReader)">
            <summary>
            Parses tokens from a given text source.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlAgilityPack.Css.Tokener.Tokenize(System.String)">
            <summary>
            Parses tokens from a given string.
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind">
            <summary>
            Represents the classification of a token.
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind.Eoi">
            <summary>
            Represents end of input/file/stream
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind.Ident">
            <summary>
            Represents {ident}
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind.Hash">
            <summary>
            Represents "#" {name}
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind.Includes">
            <summary>
            Represents "~="
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind.DashMatch">
            <summary>
            Represents "|="
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind.NotEqual">
            <summary>
            Represents "!="
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind.PrefixMatch">
            <summary>
            Represents "^="
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind.SuffixMatch">
            <summary>
            Represents "$="
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind.SubstringMatch">
            <summary>
            Represents "*="
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind.RegexMatch">
            <summary>
            Represents "%"
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind.String">
            <summary>
            Represents {string}
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind.Plus">
            <summary>
            Represents S* "+"
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind.Greater">
            <summary>
            Represents S* ">"
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind.WhiteSpace">
            <summary>
            Represents [ \t\r\n\f]+
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind.Function">
            <summary>
            Represents {ident} ")"
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind.Integer">
            <summary>
            Represents [0-9]+
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind.Tilde">
            <summary>
            Represents S* "~"
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind.Slash">
            <summary>
            Represents "/"
            </summary>
        </member>
        <member name="F:Sop.Spider.Analyzer.HtmlAgilityPack.Css.TokenKind.Char">
            <summary>
            Represents an arbitrary character
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.IParseResult">
            <summary>
            实体解析结果
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.Model`1">
            <summary>
            实体模型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Sop.Spider.Analyzer.Model`1.TypeName">
            <summary>
            实体的类型名称
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.Model`1.Selector">
            <summary>
            数据模型的选择器
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.Model`1.Take">
            <summary>
            从最终解析到的结果中取前 Take 个实体
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.Model`1.TakeFromHead">
            <summary>
            设置 Take 的方向, 默认是从头部取
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.Model`1.ValueSelectors">
            <summary>
            爬虫实体定义的数据库列信息
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.Model`1.FollowSelectors">
            <summary>
            目标链接的选择器
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.Model`1.ShareValueSelectors">
            <summary>
            共享值的选择器
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.Model`1.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.ParseResult`1">
            <summary>
            实体解析结果
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Sop.Spider.Analyzer.SelectorExtensions">
            <summary>
            选择器扩展
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.SelectorExtensions.ToSelector(Sop.Spider.Analyzer.SelectAttribute)">
            <summary>
            把 BaseSelector 转换成真正的查询器
            </summary>
            <param name="selector">BaseSelector</param>
            <returns>查询器</returns>
        </member>
        <member name="T:Sop.Spider.Analyzer.AbstractSelectable">
            <summary>
            抽象选择器
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.AbstractSelectable.Properties">
            <summary>
            共享属性
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.AbstractSelectable.Elements">
            <summary>
            查找到的所有结果
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.AbstractSelectable.XPath(System.String)">
            <summary>
            通过XPath查找结果
            </summary>
            <param name="xpath">XPath 表达式</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.AbstractSelectable.Css(System.String)">
            <summary>
            通过Css 选择器查找结果
            </summary>
            <param name="css">Css 选择器</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.AbstractSelectable.Css(System.String,System.String)">
            <summary>
            通过Css 选择器查找元素, 并取得属性的值
            </summary>
            <param name="css">Css 选择器</param>
            <param name="attrName">查询到的元素的属性</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.AbstractSelectable.Environment(System.String)">
            <summary>
            通过共用属性查找进村
            </summary>
            <param name="field">属性名称</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.AbstractSelectable.Links">
            <summary>
            查找所有的链接
            </summary>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.AbstractSelectable.Nodes">
            <summary>
            取得查询器里所有的结果
            </summary>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.AbstractSelectable.JsonPath(System.String)">
            <summary>
            通过JsonPath查找结果
            </summary>
            <param name="jsonPath">JsonPath 表达式</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.AbstractSelectable.Regex(System.String)">
            <summary>
            通过正则表达式查找结果
            </summary>
            <param name="regex">正则表达式</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.AbstractSelectable.Regex(System.String,System.Int32)">
            <summary>
            通过正则表达式查找结果
            </summary>
            <param name="regex">正则表达式</param>
            <param name="group">分组</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.AbstractSelectable.GetValue(Sop.Spider.ValueOption)">
            <summary>
            获得当前查询器的文本结果, 如果查询结果为多个, 则返回第一个结果的值
            </summary>
            <param name="option">元素取值方式</param>
            <returns>查询到的文本结果</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.AbstractSelectable.GetValues(Sop.Spider.ValueOption)">
            <summary>
            获得当前查询器的文本结果, 如果查询结果为多个, 则返回第一个结果的值
            </summary>
            <param name="option">元素取值方式</param>
            <returns>查询到的文本结果</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.AbstractSelectable.Select(Sop.Spider.Analyzer.ISelector)">
            <summary>
            通过查询器查找结果
            </summary>
            <param name="selector">查询器</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.AbstractSelectable.SelectList(Sop.Spider.Analyzer.ISelector)">
            <summary>
            通过查询器查找结果
            </summary>
            <param name="selector">查询器</param>
            <returns>查询接口</returns>
        </member>
        <member name="T:Sop.Spider.Analyzer.CssSelector">
            <summary>
            CSS 选择器
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.CssSelector.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="cssSelector">Css 选择器</param>
        </member>
        <member name="M:Sop.Spider.Analyzer.CssSelector.#ctor(System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="cssSelector">Css 选择器</param>
            <param name="attrName">属性名称</param>
        </member>
        <member name="M:Sop.Spider.Analyzer.CssSelector.Select(HtmlAgilityPack.HtmlNode)">
            <summary>
            对节点进行查询, 查询结果为第一个符合查询条件的元素
            </summary>
            <param name="element">HTML元素</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.CssSelector.SelectList(HtmlAgilityPack.HtmlNode)">
            <summary>
            对节点进行查询, 查询结果为所有符合查询条件的元素
            </summary>
            <param name="element">HTML元素</param>
            <returns>查询结果</returns>
        </member>
        <member name="P:Sop.Spider.Analyzer.CssSelector.HasAttribute">
            <summary>
            判断查询是否包含属性
            </summary>
            <returns>如果返回 True, 则说明是查询元素的属性值</returns>
        </member>
        <member name="T:Sop.Spider.Analyzer.EmptySelector">
            <summary>
            空的选择器
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.EmptySelector.Select(System.Object)">
            <summary>
            从文本中查询单个结果
            如果符合条件的结果有多个, 仅返回第一个
            </summary>
            <param name="text">需要查询的文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.EmptySelector.SelectList(System.Object)">
            <summary>
            从文本中查询所有结果
            </summary>
            <param name="text">需要查询的文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="T:Sop.Spider.Analyzer.HtmlSelector">
            <summary>
            HTML文件查询的抽象
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.HtmlSelector.HasAttribute">
            <summary>
            判断查询是否包含属性
            </summary>
            <returns>如果返回 True, 则说明是查询元素的属性值</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlSelector.Select(HtmlAgilityPack.HtmlNode)">
            <summary>
            对节点进行查询, 查询结果为第一个符合查询条件的元素
            </summary>
            <param name="element">HTML元素</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlSelector.SelectList(HtmlAgilityPack.HtmlNode)">
            <summary>
            对节点进行查询, 查询结果为所有符合查询条件的元素
            </summary>
            <param name="element">HTML元素</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlSelector.Select(System.Object)">
            <summary>
            对Html文本进行查询, 查询结果为第一个符合查询条件的元素
            </summary>
            <param name="text">Html文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.HtmlSelector.SelectList(System.Object)">
            <summary>
            对Html文本进行查询, 查询结果为所有符合查询条件的元素
            </summary>
            <param name="text">Html文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="T:Sop.Spider.Analyzer.ISelectable">
            <summary>
            查询接口
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.ISelectable.XPath(System.String)">
            <summary>
            通过XPath查找结果
            </summary>
            <param name="xpath">XPath 表达式</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.ISelectable.Css(System.String)">
            <summary>
            通过Css 选择器查找结果
            </summary>
            <param name="css">Css 选择器</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.ISelectable.Css(System.String,System.String)">
            <summary>
            通过Css 选择器查找元素, 并取得属性的值
            </summary>
            <param name="css">Css 选择器</param>
            <param name="attr">查询到的元素的属性</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.ISelectable.Environment(System.String)">
            <summary>
            通过共用属性查找进村
            </summary>
            <param name="field">属性名称</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.ISelectable.Links">
            <summary>
            查找所有的链接
            </summary>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.ISelectable.Nodes">
            <summary>
            取得查询器里所有的结果
            </summary>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.ISelectable.JsonPath(System.String)">
            <summary>
            通过JsonPath查找结果
            </summary>
            <param name="jsonPath">JsonPath 表达式</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.ISelectable.Regex(System.String)">
            <summary>
            通过正则表达式查找结果
            </summary>
            <param name="regex">正则表达式</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.ISelectable.Regex(System.String,System.Int32)">
            <summary>
            通过正则表达式查找结果
            </summary>
            <param name="regex">正则表达式</param>
            <param name="group">分组</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.ISelectable.GetValue(Sop.Spider.ValueOption)">
            <summary>
            获得当前查询器的文本结果, 如果查询结果为多个, 则返回第一个结果的值
            </summary>
            <param name="option">元素取值方式</param>
            <returns>查询到的文本结果</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.ISelectable.GetValues(Sop.Spider.ValueOption)">
            <summary>
            获得当前查询器的文本结果
            </summary>
            <param name="option">元素取值方式</param>
            <returns>查询到的文本结果</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.ISelectable.Select(Sop.Spider.Analyzer.ISelector)">
            <summary>
            通过查询器查找结果
            </summary>
            <param name="selector">查询器</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.ISelectable.SelectList(Sop.Spider.Analyzer.ISelector)">
            <summary>
            通过查询器查找结果
            </summary>
            <param name="selector">查询器</param>
            <returns>查询接口</returns>
        </member>
        <member name="T:Sop.Spider.Analyzer.ISelector">
            <summary>
            查询接口
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.ISelector.Select(System.Object)">
            <summary>
            从文本中查询单个结果
            如果符合条件的结果有多个, 仅返回第一个
            </summary>
            <param name="text">需要查询的文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.ISelector.SelectList(System.Object)">
            <summary>
            从文本中查询所有结果
            </summary>
            <param name="text">需要查询的文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="T:Sop.Spider.Analyzer.JsonPathSelector">
            <summary>
            JsonPath selector.
            Used to extract content from JSON.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.JsonPathSelector.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="jsonPath">JsonPath</param>
        </member>
        <member name="M:Sop.Spider.Analyzer.JsonPathSelector.Select(System.Object)">
            <summary>
            从JSON文本中查询单个结果
            如果符合条件的结果有多个, 仅返回第一个
            </summary>
            <param name="json">需要查询的Json文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.JsonPathSelector.SelectList(System.Object)">
            <summary>
            从JSON文本中查询所有结果
            </summary>
            <param name="json">需要查询的Json文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="T:Sop.Spider.Analyzer.RegexSelector">
            <summary>
            正则查询器
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.RegexSelector.#ctor(System.String,System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="pattern">正则表达式</param>
            <param name="group"></param>
        </member>
        <member name="M:Sop.Spider.Analyzer.RegexSelector.Select(System.Object)">
            <summary>
            从文本中查询单个结果
            如果符合条件的结果有多个, 仅返回第一个
            </summary>
            <param name="text">需要查询的文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.RegexSelector.SelectList(System.Object)">
            <summary>
            从文本中查询所有结果
            </summary>
            <param name="text">需要查询的文本</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.RegexSelector.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Sop.Spider.Analyzer.Selectable">
            <summary>
            选择器
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectable.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="text">内容</param>
            <param name="url">URL相对路径补充</param>
            <param name="removeOutboundLinks">是否去除外链</param>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectable.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="text">Json</param>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectable.#ctor(System.Collections.Generic.List{System.Object})">
            <summary>
            构造方法
            </summary>
            <param name="nodes">被查询的元素</param>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectable.Css(System.String)">
            <summary>
            通过Css 选择器查找结果
            </summary>
            <param name="css">Css 选择器</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectable.Css(System.String,System.String)">
            <summary>
            通过Css 选择器查找元素, 并取得属性的值
            </summary>
            <param name="css">Css 选择器</param>
            <param name="attrName">查询到的元素的属性</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectable.Environment(System.String)">
            <summary>
            通过共用属性查找进村
            </summary>
            <param name="field">属性名称</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectable.Links">
            <summary>
            查找所有的链接
            </summary>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectable.XPath(System.String)">
            <summary>
            通过XPath查找结果
            </summary>
            <param name="xpath">XPath 表达式</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectable.Select(Sop.Spider.Analyzer.ISelector)">
            <summary>
            通过查询器查找结果
            </summary>
            <param name="selector">查询器</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectable.SelectList(Sop.Spider.Analyzer.ISelector)">
            <summary>
            通过查询器查找结果
            </summary>
            <param name="selector">查询器</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectable.Nodes">
            <summary>
            取得查询器里所有的结果
            </summary>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectable.JsonPath(System.String)">
            <summary>
            通过JsonPath查找结果
            </summary>
            <param name="jsonPath">JsonPath 表达式</param>
            <returns>查询接口</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectable.CanonicalizeUrl(System.String,System.String)">
            <summary>
            计算最终的URL
            </summary>
            <param name="url">Base uri</param>
            <param name="refer">Relative uri</param>
            <returns>最终的URL</returns>
        </member>
        <member name="T:Sop.Spider.Analyzer.Selectors">
            <summary>
            查询器的构建帮助类, 相同的查询器会缓存起来.
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectors.Regex(System.String)">
            <summary>
            创建正则查询器
            </summary>
            <param name="expr">正则表达式</param>
            <returns>查询器</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectors.Regex(System.String,System.Int32)">
            <summary>
            创建正则查询器
            </summary>
            <param name="expr">正则表达式</param>
            <param name="group"></param>
            <returns>查询器</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectors.Css(System.String)">
            <summary>
            创建Css查询器
            </summary>
            <param name="expr">Css表达式</param>
            <returns>查询器</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectors.Css(System.String,System.String)">
            <summary>
            创建Css查询器
            </summary>
            <param name="expr">Css表达式</param>
            <param name="attrName">属性名称</param>
            <returns>查询器</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectors.XPath(System.String)">
            <summary>
            创建XPath查询器
            </summary>
            <param name="expr">Xpath表达式</param>
            <returns>查询器</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectors.Default">
            <summary>
             创建空查询器
            </summary>
            <returns>查询器</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.Selectors.JsonPath(System.String)">
            <summary>
            创建JsonPath查询器
            </summary>
            <param name="expr">JsonPath表达式</param>
            <returns>查询器</returns>
        </member>
        <member name="T:Sop.Spider.Analyzer.XPathSelector">
            <summary>
            Xpath选择器
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.XPathSelector.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="xpath">Xpath表达式</param>
        </member>
        <member name="M:Sop.Spider.Analyzer.XPathSelector.Select(HtmlAgilityPack.HtmlNode)">
            <summary>
            对节点进行查询, 查询结果为第一个符合查询条件的元素
            </summary>
            <param name="element">HTML元素</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Sop.Spider.Analyzer.XPathSelector.SelectList(HtmlAgilityPack.HtmlNode)">
            <summary>
            对节点进行查询, 查询结果为所有符合查询条件的元素
            </summary>
            <param name="element">HTML元素</param>
            <returns>查询结果</returns>
        </member>
        <member name="P:Sop.Spider.Analyzer.XPathSelector.HasAttribute">
            <summary>
            判断查询是否包含属性
            </summary>
            <returns>如果返回 True, 则说明是查询元素的属性值</returns>
        </member>
        <member name="T:Sop.Spider.Analyzer.EntitySelectAttribute">
            <summary>
            实体选择器
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.EntitySelectAttribute.Take">
            <summary>
            从最终解析到的结果中取前 Take 个实体
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.EntitySelectAttribute.TakeFromHead">
            <summary>
            设置 Take 的方向, 默认是从头部取
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.FollowSelectAttribute">
            <summary>
            目标链接选择器（用于批量采集时，选择目标）
            Todo 待完善 需求如下
            1、要求支持JQ操作（期望，不一定实现，实现难度太大）
            2、支持循环操作
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.FollowSelectAttribute.TypeId">
            <summary>
            避免被序列化出去
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.FollowSelectAttribute.XPaths">
            <summary>
            目标链接所在区域
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.FollowSelectAttribute.Patterns">
            <summary>
            匹配目标链接的正则表达式
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.FollowSelectAttribute.ExcludePatterns">
            <summary>
            需要排除链接的正则表达式
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.GlobalValueSelectAttribute.Name">
            <summary>
            解析值的名称
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.SelectAttribute">
            <summary>
            选择器特性
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.SelectAttribute.TypeId">
            <summary>
            避免被序列化出去
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.SelectAttribute.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.SelectAttribute.#ctor(System.String,Sop.Spider.SelectorType,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="expression">表达式</param>
            <param name="type">选择器类型</param>
            <param name="arguments">参数</param>
        </member>
        <member name="P:Sop.Spider.Analyzer.SelectAttribute.Type">
            <summary>
            选择器类型
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.SelectAttribute.Expression">
            <summary>
            表达式
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.SelectAttribute.Arguments">
            <summary>
            参数
            </summary>
        </member>
        <member name="T:Sop.Spider.Analyzer.ValueSelectAttribute">
            <summary>
            内容选择器（用于解析实体匹配内容信息，根据实体（xPath、正则、等属性）解析网页）
            TODO: 疑问 xpth对于不同前缀class demo_1 demo_2  选择的支持是否有更好的支持，详细见微信搜狗
            
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.ValueSelectAttribute.PropertyInfo">
            <summary>
            属性反射，用于设置解析值到实体对象
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.ValueSelectAttribute.NotNull">
            <summary>
            值是否可以为空, 如果不能为空但解析到的值为空时，当前对象被抛弃
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.ValueSelectAttribute.Name">
            <summary>
            解析值的名称，配置在 Entity 上时必填，配置在属性上时可以空，如果为空会被属性名替代
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.ValueSelectAttribute.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Sop.Spider.Analyzer.ValueSelectAttribute.#ctor(System.String,Sop.Spider.SelectorType)">
            <summary>
            构造方法
            </summary>
            <param name="type">选择器类型</param>
            <param name="expression">表达式</param>
        </member>
        <member name="P:Sop.Spider.Analyzer.ValueSelectAttribute.FormatBaseAttributes">
            <summary>
            数据格式化
            </summary>
        </member>
        <member name="P:Sop.Spider.Analyzer.ValueSelectAttribute.ValueOption">
            <summary>
            额外选项的定义
            </summary>
        </member>
        <member name="T:Sop.Spider.Common.AtomicInteger">
            <summary>
            线程安全的计数器
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.AtomicInteger.Value">
            <summary>
            获取当前值
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.AtomicInteger.#ctor">
            <summary>
            构造方法, 起始值为 0
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.AtomicInteger.#ctor(System.Int32)">
            <summary>
            使用指定值作为初始值创建新实例
            </summary>
            <param name="initValue">计算开始值</param>
        </member>
        <member name="M:Sop.Spider.Common.AtomicInteger.Inc">
            <summary>
            递增并返回最新值
            </summary>
            <returns>递增后的值</returns>
        </member>
        <member name="M:Sop.Spider.Common.AtomicInteger.Dec">
            <summary>
            递减并返回最新值
            </summary>
            <returns>递减后的值</returns>
        </member>
        <member name="M:Sop.Spider.Common.AtomicInteger.CompareAndSet(System.Int32,System.Int32)">
            <summary>
            比较并设置新值
            </summary>
            <param name="expectedValue">期望的值</param>
            <param name="newValue">新值</param>
            <returns>更新成功时返回true</returns>
        </member>
        <member name="M:Sop.Spider.Common.AtomicInteger.Set(System.Int32)">
            <summary>
            强制更新为新值
            </summary>
            <param name="newValue">新的值</param>
        </member>
        <member name="T:Sop.Spider.Common.AtomicLong">
            <summary>
            线程安全的计数器
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.AtomicLong.Value">
            <summary>
            获取当前值
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.AtomicLong.#ctor">
            <summary>
            构造方法, 起始值为 0
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.AtomicLong.#ctor(System.Int64)">
            <summary>
            使用指定值作为初始值创建新实例
            </summary>
            <param name="initValue">计算开始值</param>
        </member>
        <member name="M:Sop.Spider.Common.AtomicLong.Inc">
            <summary>
            递增并返回最新值
            </summary>
            <returns>递增后的值</returns>
        </member>
        <member name="M:Sop.Spider.Common.AtomicLong.Dec">
            <summary>
            递减并返回最新值
            </summary>
            <returns>递减后的值</returns>
        </member>
        <member name="M:Sop.Spider.Common.AtomicLong.CompareAndSet(System.Int64,System.Int64)">
            <summary>
            比较并设置新值
            </summary>
            <param name="expectedValue">期望的值</param>
            <param name="newValue">新值</param>
            <returns>更新成功时返回true</returns>
        </member>
        <member name="M:Sop.Spider.Common.AtomicLong.Set(System.Int64)">
            <summary>
            强制更新为新值
            </summary>
            <param name="newValue">新的值</param>
        </member>
        <member name="T:Sop.Spider.Common.BloomFilter">
            <summary>
            BloomFilter
            </summary>
        </member>
        <member name="F:Sop.Spider.Common.BloomFilter.DigestFunction">
            <summary>
            The digest method is reused between instances
            </summary>
            <remarks>MD5 gives good enough accuracy in most circumstances. Change to SHA1 if it's needed</remarks>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.#ctor(System.Double,System.Int32,System.Int32)">
            <summary>
            Constructs an empty Bloom filter. The total length of the Bloom filter will be
            c*n.
            </summary>
            <param name="c">is the number of bits used per element.</param>
            <param name="n">is the expected number of elements the filter will contain.</param>
            <param name="k">is the number of hash functions used.</param>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs an empty Bloom filter. The optimal number of hash functions (k) is estimated from the total size of the Bloom
            and the number of expected elements.
            </summary>
            <param name="bitSetSize">defines how many bits should be used in total for the filter.</param>
            <param name="expectedNumberOElements">defines the maximum number of elements the filter is expected to contain.</param>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.#ctor(System.Double,System.Int32)">
            <summary>
            Constructs an empty Bloom filter with a given false positive probability. The number of bits per
            element and the number of hash functions is estimated
            to match the false positive probability.
            </summary>
            <param name="falsePositiveProbability">is the desired false positive probability.</param>
            <param name="expectedNumberOfElements">is the expected number of elements in the Bloom filter.</param>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.BitArray)">
            <summary>
            Construct a new Bloom filter based on existing Bloom filter data.
            </summary>
            <param name="bitSetSize">defines how many bits should be used for the filter.</param>
            <param name="expectedNumberOfFilterElements">defines the maximum number of elements the filter is expected to contain.</param>
            <param name="actualNumberOfFilterElements">specifies how many elements have been inserted into the <code>filterData</code> BitArray.</param>
            <param name="filterData">a BitArray representing an existing Bloom filter.</param>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.CreateHash(System.String,System.Text.Encoding)">
            <summary>
            Generates a digest based on the contents of a string.
            </summary>
            <param name="val">specifies the input data.</param>
            <param name="charset">specifies the encoding of the input data.</param>
            <returns>digest as long.</returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.CreateHash(System.String)">
            <summary>
            Generates a digest based on the contents of a string.
            </summary>
            <param name="val">specifies the input data. The encoding is expected to be UTF-8.</param>
            <returns>digest as long.</returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.CreateHash(System.Byte[])">
            <summary>
            Generates a digest based on the contents of an array of bytes.
            </summary>
            <param name="data">specifies input data.</param>
            <returns>digest as long.</returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.CreateHashes(System.Byte[],System.Int32)">
            <summary>
            Generates digests based on the contents of an array of bytes and splits the result into 4-byte int's and store them in an array. The
            digest function is called until the required number of int's are produced. For each call to digest a salt
            is prepended to the data. The salt is increased by 1 for each call.
            </summary>
            <param name="data">specifies input data</param>
            <param name="hashes">number of hashes/int's to produce</param>
            <returns>array of int-sized hashes</returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.Equals(System.Object)">
            <summary>
            Compares the contents of two instances to see if they are equal.
            </summary>
            <param name="obj">is the object to compare to.</param>
            <returns>True if the contents of the objects are equal.</returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.GetHashCode">
            <summary>
            Calculates a hash code for this class.
            <remarks>performance concerns : note that we read all the bits of bitset to compute the hash</remarks>
            <returns>hash code representing the contents of an instance of this class.</returns>
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.ExpectedFalsePositiveProbability">
            <summary>
            Calculates the expected probability of false positives based on
            the number of expected filter elements and the size of the Bloom filter.
            <br /><br />
            The value returned by this method is the <i>expected</i> rate of false
            positives, assuming the number of inserted elements equals the number of
            expected elements. If the number of elements in the Bloom filter is less
            than the expected value, the true probability of false positives will be lower.
            </summary>
            <returns>expected probability of false positives.</returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.GetFalsePositiveProbability(System.Double)">
            <summary>
            Calculate the probability of a false positive given the specified
            number of inserted elements.
            </summary>
            <param name="numberOfElements">number of inserted elements.</param>
            <returns>probability of a false positive.</returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.GetFalsePositiveProbability">
            <summary>
            Get the current probability of a false positive. The probability is calculated from
            the size of the Bloom filter and the current number of elements added to it.
            </summary>
            <returns>probability of false positives.</returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.GetK">
            <summary>
            Returns the value chosen for K.<br />
            <br />
            K is the optimal number of hash functions based on the size
            of the Bloom filter and the expected number of inserted elements.
            </summary>
            <returns>optimal k.</returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.Clear">
            <summary>
            Sets all bits to false in the Bloom filter.
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.Add(System.Object)">
            <summary>
            Adds an object to the Bloom filter. The output from the object's
            ToString() method is used as input to the hash functions.
            </summary>
            <param name="element">is an element to register in the Bloom filter.</param>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.Add(System.Byte[])">
            <summary>
            Adds an array of bytes to the Bloom filter.
            </summary>
            <param name="bytes">array of bytes to add to the Bloom filter.</param>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.AddAll(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Adds all elements from a Collection to the Bloom filter.
            </summary>
            <param name="c">Collection of elements.</param>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.AddAll(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Adds all elements from a Collection to the Bloom filter.
            </summary>
            <param name="c">Collection of elements.</param>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.Contains(System.Object)">
            <summary>
            Returns true if the element could have been inserted into the Bloom filter.
            Use getFalsePositiveProbability() to calculate the probability of this
            being correct.
            </summary>
            <param name="element">element to check.</param>
            <returns>true if the element could have been inserted into the Bloom filter.</returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.Contains(System.Byte[])">
            <summary>
            Returns true if the array of bytes could have been inserted into the Bloom filter.
            Use getFalsePositiveProbability() to calculate the probability of this
            being correct.
            </summary>
            <param name="bytes">array of bytes to check.</param>
            <returns>true if the array could have been inserted into the Bloom filter.</returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.ContainsAll(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Returns true if all the elements of a Collection could have been inserted
            into the Bloom filter. Use getFalsePositiveProbability() to calculate the
            probability of this being correct.
            </summary>
            <param name="c">elements to check.</param>
            <returns>true if all the elements in c could have been inserted into the Bloom filter.</returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.GetBit(System.Int32)">
            <summary>
            Read a single bit from the Bloom filter.
            </summary>
            <param name="bit">the bit to read.</param>
            <returns>true if the bit is set, false if it is not.</returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.SetBit(System.Int32,System.Boolean)">
            <summary>
            Set a single bit in the Bloom filter.
            </summary>
            <param name="bit">is the bit to set.</param>
            <param name="value">If true, the bit is set. If false, the bit is cleared.</param>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.GetBitSet">
            <summary>
            Return the bit set used to store the Bloom filter.
            </summary>
            <returns>bit set representing the Bloom filter.</returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.Size">
            <summary>
            Returns the number of bits in the Bloom filter. Use count() to retrieve
            the number of inserted elements.
            </summary>
            <returns>the size of the bitset used by the Bloom filter.</returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.Count">
            <summary>
            Returns the number of elements added to the Bloom filter after it
            was constructed or after clear() was called.
            </summary>
            <returns>number of elements added to the Bloom filter.</returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.GetExpectedNumberOfElements">
            <summary>
            Returns the expected number of elements to be inserted into the filter.
            This value is the same value as the one passed to the constructor.
            </summary>
            <returns>expected number of elements.</returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.GetExpectedBitsPerElement">
            <summary>
            Get expected number of bits per element when the Bloom filter is full. This value is set by the constructor
            when the Bloom filter is created. See also getBitsPerElement().
            </summary>
            <returns>expected number of bits per element.</returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.GetBitsPerElement">
            <summary>
            Get actual number of bits per element based on the number of elements that have currently been inserted and the length
            of the Bloom filter. See also getExpectedBitsPerElement().
            </summary>
            <returns>number of bits per element.</returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.HashBytes(System.Collections.BitArray)">
            <summary>
            Generate a hash value from an array of bits
            </summary>
            <remarks>voir http://blog.roblevine.co.uk for comparison of hash algorithm implementations</remarks>
            <param name="data">array of bits to hash</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Common.BloomFilter.Equals(System.Collections.BitArray,System.Collections.BitArray)">
            <summary>
            Check if two arrays of bits are equals
            Returns true if every bit of this first array is equal to the corresponding bit of the second, false otherwise
            </summary>
        </member>
        <member name="T:Sop.Spider.Common.ConsoleHelper">
            <summary>
            Console的帮助类
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.ConsoleHelper.WriteLine(System.String,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            打印一行信息
            </summary>
            <param name="message">需要打印的信息</param>
            <param name="color">打印的颜色</param>
            <param name="colorAfter">设置打印完成Console的字体颜色</param>
        </member>
        <member name="M:Sop.Spider.Common.ConsoleHelper.WriteLine(System.String,System.Int32,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            打印一行信息
            </summary>
            <param name="message">需要打印的信息</param>
            <param name="blankLineCount">打印空行数</param>
            <param name="color">打印的颜色</param>
            <param name="colorAfter">设置打印完成Console的字体颜色</param>
        </member>
        <member name="T:Sop.Spider.Common.Cookie">
            <summary>
            
            </summary>
        </member>
        <member name="T:Sop.Spider.Common.DateTimeHelper">
            <summary>
            时间的帮助类
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.DateTimeHelper.TodayString">
            <summary>
            当天的RunId: 2017-12-20
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.DateTimeHelper.MonthString">
            <summary>
            当月的RunId: 2017-12-01
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.DateTimeHelper.MondayString">
            <summary>
            当周的RunId: 2018-01-01 (it's monday)
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.DateTimeHelper.FirstDayOfMonth">
            <summary>
            当前月份的第一天
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.DateTimeHelper.LastDayOfMonth">
            <summary>
            当前月份的最后一天
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.DateTimeHelper.FirstDayOfLastMonth">
            <summary>
            上一月份的第一天
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.DateTimeHelper.LastDayOfLastMonth">
            <summary>
            上一月份的最后一天
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.DateTimeHelper.Today">
            <summary>
            星期一
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.DateTimeHelper.Monday">
            <summary>
            星期一
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.DateTimeHelper.Tuesday">
            <summary>
            星期二
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.DateTimeHelper.Wednesday">
            <summary>
            星期三
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.DateTimeHelper.Thursday">
            <summary>
            星期四
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.DateTimeHelper.Friday">
            <summary>
            星期五
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.DateTimeHelper.Saturday">
            <summary>
            星期六
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.DateTimeHelper.Sunday">
            <summary>
            星期天
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.DateTimeHelper.ConvertDateTimeToUnix(System.DateTime)">
            <summary>
            把时间转换成Unix时间: 1515133023012
            </summary>
            <param name="time">时间</param>
            <returns>Unix时间</returns>
        </member>
        <member name="M:Sop.Spider.Common.DateTimeHelper.ToUnixTime(System.Int64)">
            <summary>
            把Unix时间转换成DateTime
            </summary>
            <param name="unixTime">Unix时间</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:Sop.Spider.Common.DateTimeHelper.GetCurrentUnixTimeString">
            <summary>
            获取当前Unix时间
            </summary>
            <returns>Unix时间</returns>
        </member>
        <member name="M:Sop.Spider.Common.DateTimeHelper.GetCurrentUnixMilliseconds">
            <summary>
            获取当前Unix时间
            </summary>
            <returns>Unix时间</returns>		 
        </member>
        <member name="M:Sop.Spider.Common.DirectoryHelper.CopyTo(System.IO.DirectoryInfo,System.String)">
            <summary>
            复制文件夹
            </summary>
            <param name="source">被复制的文件夹</param>
            <param name="destination">目标文件夹</param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.Common.EncodingHelper">
            <summary>
            编码扩展
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.EncodingHelper.GetEncoding(System.String,System.Byte[])">
            <summary>
            检测编码类型
            </summary>
            <param name="characterSet">编码名称</param>
            <param name="bytes">被检测的编码</param>
            <returns>编码类型</returns>
        </member>
        <member name="T:Sop.Spider.Common.FileLockerFactory">
            <summary>
            文件锁
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.FileLockerFactory.Sop#Spider#Common#ILockerFactory#GetLocker">
            <summary>
            获取文件锁（文件并发使用吧？）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Common.FileLockerFactory.Sop#Spider#Common#ILockerFactory#GetLocker(System.String)">
             <summary>
            获取文件并发锁
             </summary>
             <param name="locker"></param>
             <returns></returns>
        </member>
        <member name="M:Sop.Spider.Common.FileStreamHelper.ReadAllText(System.IO.FileStream)">
            <summary>
            
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Common.FileStreamHelper.WriteAllText(System.IO.FileStream,System.String)">
            <summary>
            
            </summary>
            <param name="fs"></param>
            <param name="text"></param>
        </member>
        <member name="F:Sop.Spider.Common.Framework.DownloadCommand">
            <summary>
            下载指令
            </summary>
        </member>
        <member name="F:Sop.Spider.Common.Framework.RegisterCommand">
            <summary>
            注册指令
            </summary>
        </member>
        <member name="F:Sop.Spider.Common.Framework.HeartbeatCommand">
            <summary>
            心跳指令
            </summary>
        </member>
        <member name="F:Sop.Spider.Common.Framework.ExitCommand">
            <summary>
            退出指令
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.Framework.SetMultiThread">
            <summary>
            设置多线程
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.Framework.PrintInfo">
            <summary>
            打印爬虫框架信息
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.Framework.PrintLine(System.Char)">
            <summary>
            打印一整行word到控制台中
            </summary>
            <param name="word">打印的字符</param>
        </member>
        <member name="T:Sop.Spider.Common.GlobalRedirectHandler">
            <summary>
            全局重定向处理
            </summary>
        </member>
        <member name="T:Sop.Spider.Common.ILocker">
            <summary>
            锁接口
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.ILocker.Information">
            <summary>
            信息
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.ILocker.Locker">
            <summary>
            
            </summary>
        </member>
        <member name="T:Sop.Spider.Common.FileLocker">
            <summary>
            文件锁
            </summary>
        </member>
        <member name="T:Sop.Spider.Common.ILockerFactory">
            <summary>
            文件锁工厂接口
            </summary>
        </member>
        <member name="T:Sop.Spider.Common.LimitedConcurrencyThreadPool">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.LimitedConcurrencyThreadPool.QueueUserWork``1(System.Action{``0},``0)">
            <summary>
            一直等待直到任务被排上
            </summary>
            <typeparam name="T">数据对象的类型</typeparam>
            <param name="action">任务</param>
            <param name="obj">数据对象</param>
        </member>
        <member name="M:Sop.Spider.Common.LimitedConcurrencyThreadPool.TryQueueUserWork``1(System.Action{``0},``0)">
            <summary>
            尝试把任务排到线程池上
            </summary>
            <typeparam name="T">数据对象类型</typeparam>
            <param name="action">任务</param>
            <param name="obj">数据对象</param>
            <returns>是否排队成功</returns>
        </member>
        <member name="M:Sop.Spider.Common.LimitedConcurrencyThreadPool.QueueUserWork(System.Action)">
            <summary>
            一直等待直到任务被排上
            </summary>
            <param name="action">任务</param>
        </member>
        <member name="M:Sop.Spider.Common.LimitedConcurrencyThreadPool.TryQueueUserWork(System.Action)">
            <summary>
            尝试把任务排到线程池上
            </summary>
            <param name="action">任务</param>
            <returns>是否排队成功</returns>
        </member>
        <member name="T:Sop.Spider.Common.LinuxCpuLoad">
            <summary>
            
            </summary>
        </member>
        <member name="T:Sop.Spider.Common.PriorityBlockingQueue`1">
            <summary>
            优先级的线程安全队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Sop.Spider.Common.PriorityBlockingQueue`1.Count">
            <summary>
            当前队列中的元素个数
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.PriorityBlockingQueue`1.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.PriorityBlockingQueue`1.#ctor(System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:Sop.Spider.Common.PriorityBlockingQueue`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            构造方法
            </summary>
            <param name="comparer">优先级比较器</param>
        </member>
        <member name="M:Sop.Spider.Common.PriorityBlockingQueue`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            构造方法
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
            <param name="comparer">优先级比较器</param>
        </member>
        <member name="M:Sop.Spider.Common.PriorityBlockingQueue`1.Clear">
            <summary>
            清空队列
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.PriorityBlockingQueue`1.Push(`0)">
            <summary>
            把元素入队
            </summary>
            <param name="v">元素</param>
        </member>
        <member name="M:Sop.Spider.Common.PriorityBlockingQueue`1.Pop">
            <summary>
            元素出队
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:Sop.Spider.Common.PriorityBlockingQueue`1.Top">
            <summary>
            队列第一个元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="T:Sop.Spider.Common.RedisQueue">
            <summary>
            使用Redis的队列实现
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.RedisQueue.#ctor(StackExchange.Redis.ConfigurationOptions)">
            <summary>
            
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Sop.Spider.Common.RedisQueue.CounterKey(System.String,System.String)">
            <summary>
            生成计数器的CacheKey
            </summary>
            <param name="countType">计数类型</param>
            <param name="tenantType">租户类型</param>
            <returns>CacheKey</returns>
        </member>
        <member name="M:Sop.Spider.Common.RedisQueue.RankingKey(System.String,System.String,System.String)">
            <summary>
            生成排行榜的CacheKey
            </summary>
            <param name="countType">计数类型</param>
            <param name="ownerType">所有者类型</param>
            <param name="ownerId">所有者Id</param>
            <returns>CacheKey</returns>
        </member>
        <member name="M:Sop.Spider.Common.RedisQueue.Gets``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Common.RedisQueue.Set(System.String,System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="data"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Sop.Spider.Common.RedisQueue.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="timeSpan"></param>
        </member>
        <member name="M:Sop.Spider.Common.RedisQueue.IsSet(System.String)">
            <summary>
            是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Common.RedisQueue.Remove(System.String)">
            <summary>
            删除 
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Sop.Spider.Common.RedisQueue.RemoveByPattern(System.String)">
            <summary>
            删除父类
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:Sop.Spider.Common.RedisQueue.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.RedisQueue.Push(System.String,StackExchange.Redis.RedisValue)">
            <summary>
            将一个对象加入队列
            </summary>
            <param name="cacheKey">队列名称</param>
            <param name="value">加入队列的对象</param>
        </member>
        <member name="M:Sop.Spider.Common.RedisQueue.Pop(System.String)">
            <summary>
            从队列起始位置获取一个对象
            </summary>
            <param name="cacheKey">队列名称</param>
            <returns>队列起始位置的对象</returns>
        </member>
        <member name="M:Sop.Spider.Common.RedisQueue.ChangeCount(System.String,System.String,System.String,System.Int64)">
            <summary>
            改变（增加或减少）计数
            </summary>
            <param name="countType">计数类型</param>
            <param name="tenantType">租户类型</param>
            <param name="tenantId">租户Id</param>
            <param name="value">改变的计数值，可以为负值，即减少计数</param>
            <returns>改变后的计数值</returns>
        </member>
        <member name="M:Sop.Spider.Common.RedisQueue.DeleteCount(System.String,System.String,System.String)">
            <summary>
            删除一个对象的计数
            </summary>
            <param name="countType">计数类型</param>
            <param name="tenantType">租户类型</param>
            <param name="tenantId">租户Id</param>
        </member>
        <member name="M:Sop.Spider.Common.RedisQueue.GetCount(System.String,System.String,System.String)">
            <summary>
            获取一个对象的计数，例如网页中的链接数
            </summary>
            <param name="countType">计数类型</param>
            <param name="tenantType">租户类型</param>
            <param name="tenantId">租户Id</param>
            <returns>计数值</returns>
        </member>
        <member name="M:Sop.Spider.Common.RedisQueue.ChangeRanking(System.String,System.String,System.String,System.String,System.Double)">
            <summary>
            改变（增加或减少）排行榜的分值
            </summary>
            <param name="countType">计数类型</param>
            <param name="ownerType">所有者类型</param>
            <param name="ownerId">所有者Id</param>
            <param name="objectId">排行榜对象Id</param>
            <param name="value">改变的排行榜分值，可以为负值，即减少分值</param>
            <returns>改变后的排行榜分值</returns>
        </member>
        <member name="M:Sop.Spider.Common.RedisQueue.DeleteRanking(System.String,System.String,System.String,System.String)">
            <summary>
            删除排行榜中的一个对象
            </summary>
            <param name="countType">计数类型</param>
            <param name="ownerType">所有者类型</param>
            <param name="ownerId">所有者Id</param>
            <param name="objectId">排行榜对象Id</param>
        </member>
        <member name="M:Sop.Spider.Common.RedisQueue.GetRanking(System.String,System.String,System.String,System.String)">
            <summary>
            获取排行榜中一个对象的分值，例如网页中链接数
            </summary>
            <param name="countType">计数类型</param>
            <param name="ownerType">所有者类型</param>
            <param name="ownerId">所有者Id</param>
            <param name="objectId">排行榜对象Id</param>
            <returns>排行榜中一个对象的分值</returns>
        </member>
        <member name="M:Sop.Spider.Common.RedisQueue.TopRanking(System.String,System.String,System.String,System.Int32)">
            <summary>
            根据分值排序，获取排行榜中前N条记录
            </summary>
            <param name="countType">计数类型</param>
            <param name="ownerType">所有者类型</param>
            <param name="ownerId">所有者Id</param>
            <param name="topNumber">前N条记录</param>
            <returns>排行榜数据的键值对集合，Key是排行榜对象Id，Value是其对应的分值</returns>
        </member>
        <member name="F:Sop.Spider.Common.RegexHelper.IpAddress">
            <summary>
            IP正则表达式
            </summary>
        </member>
        <member name="F:Sop.Spider.Common.RegexHelper.Number">
            <summary>
            数字正则表达式
            </summary>
        </member>
        <member name="F:Sop.Spider.Common.RegexHelper.Decimal">
            <summary>
            小数正则表达式
            </summary>
        </member>
        <member name="F:Sop.Spider.Common.RegexHelper.Url">
            <summary>
            URL正则表达式
            </summary>
        </member>
        <member name="T:Sop.Spider.Common.SerilogConsoleTheme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sop.Spider.Common.SerilogHttpSink.DefaultBatchPostingLimit">
            <summary>
            A reasonable default for the number of events posted in
            each batch.
            </summary>
        </member>
        <member name="F:Sop.Spider.Common.SerilogHttpSink.DefaultPeriod">
            <summary>
            A reasonable default time to wait between checking for event batches.
            </summary>
        </member>
        <member name="T:Sop.Spider.Common.Singleton`1">
            <summary>
            单独的泛型实型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Sop.Spider.Common.Singleton`1.Instance">
            <summary>
            单例对象
            </summary>
        </member>
        <member name="T:Sop.Spider.Common.SpiderOptions">
             <summary>
             任务选项
            
             TODO 配置文件今天话，取消依赖注入
             </summary>
        </member>
        <member name="P:Sop.Spider.Common.SpiderOptions.GetRedisOptions">
            <summary>
            租户类型
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.SpiderOptions.AppSettings``1(System.String,``0)">
            <summary>
            获取配置文件中当前键值对应的值，并转换为相应的类型
            </summary>
            <typeparam name="T">想要转换的类型</typeparam>
            <param name="key">键值</param>
            <param name="defaultValue">默认值</param>
            <returns>配置项值</returns>
        </member>
        <member name="P:Sop.Spider.Common.SpiderOptions.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.SpiderOptions.StorageConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.SpiderOptions.Storage">
            <summary>
            存储器类型: FullTypeName, AssemblyName
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.SpiderOptions.StorageIgnoreCase">
            <summary>
            是否忽略数据库相关的大写小
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.SpiderOptions.StorageRetryTimes">
            <summary>
            存储器失败重试时间限制
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.SpiderOptions.StorageUseTransaction">
            <summary>
            是否使用事务操作。默认不使用。
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.SpiderOptions.StorageType">
            <summary>
            存储器类型
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.SpiderOptions.MySqlFileType">
            <summary>
            MySql 文件类型
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.SpiderOptions.EmailHost">
            <summary>
            邮件服务地址
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.SpiderOptions.EmailAccount">
            <summary>
            邮件用户名
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.SpiderOptions.EmailPassword">
            <summary>
            邮件密码
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.SpiderOptions.EmailDisplayName">
            <summary>
            邮件显示名称
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.SpiderOptions.EmailPort">
            <summary>
            邮件服务端口
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.SpiderOptions.KafkaBootstrapServers">
            <summary>
            Kafka 服务地址
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.SpiderOptions.KafkaConsumerGroup">
            <summary>
            Kafka 消费组
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.SpiderOptions.DownloadedAgentRegisterCenterTopic">
            <summary>
            下载代理注入订阅消息队列
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.SpiderOptions.MessageQueueRetryTimes">
            <summary>
            消息队列推送消息、文章话题、获取消息失败重试的次数
            默认是 28800 次即 8 小时
            </summary>
        </member>
        <member name="P:Sop.Spider.Common.SpiderOptions.MessageExpiredTime">
            <summary>
            设置消息过期时间，每个消息发送应该带上时间，超时的消息不作处理
            默认值 60 秒
            </summary>
        </member>
        <member name="T:Sop.Spider.Common.WindowsFormHelper">
            <summary>
            Windows Form 帮助类
            </summary>
        </member>
        <member name="M:Sop.Spider.Common.WindowsFormHelper.FindWindow(System.String,System.String)">
            <summary>
            查找窗口句柄
            </summary>
            <param name="lpClassName"></param>
            <param name="lpWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Common.WindowsFormHelper.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary>
            查找窗口句柄
            </summary>
            <param name="hwndParent"></param>
            <param name="hwndChildAfter"></param>
            <param name="lpClassName"></param>
            <param name="lpWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Common.WindowsFormHelper.SendMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            给指定句柄发消息
            </summary>
            <param name="hwnd"></param>
            <param name="wMsg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="F:Sop.Spider.Common.WindowsFormHelper.WmClose">
            <summary>
            关闭窗口的信号
            </summary>
        </member>
        <member name="M:Sop.Spider.ExtractionException.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="msg">异常信息</param>
        </member>
        <member name="M:Sop.Spider.ExtractionException.#ctor(System.String,System.Exception)">
            <summary>
            构造方法
            </summary>
            <param name="msg">异常信息</param>
            <param name="e">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Sop.Spider.DataStorage.Column">
            <summary>
            列信息
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.Column.PropertyInfo">
            <summary>
            属性反射，用于设置解析值到实体对象
            </summary>
        </member>
        <member name="T:Sop.Spider.DataStorage.DataFlowBase">
            <summary>
            数据流处理器基类
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.DataFlowBase.Logger">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.DataFlowBase.InitAsync">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.DataFlowBase.HandleAsync(Sop.Spider.DataStorage.DataFlowContext)">
            <summary>
            流处理
            </summary>
            <param name="context">处理上下文</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.DataFlowBase.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:Sop.Spider.DataStorage.DataFlowContext">
            <summary>
            数据流处理器上下文
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.DataFlowContext.Services">
            <summary>
            注入的服务
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.DataFlowContext.Response">
            <summary>
            下载器返回的结果
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.DataFlowContext.FollowRequests">
            <summary>
            解析到的目标链接
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.DataFlowContext.#ctor(Sop.Spider.Download.Response,System.IServiceProvider)">
            <summary>
            构造方法
            </summary>
            <param name="response">下载器返回的结果</param>
            <param name="serviceProvider">注入的服务</param>
        </member>
        <member name="M:Sop.Spider.DataStorage.DataFlowContext.GetSelectable(Sop.Spider.ContentType,System.Boolean)">
            <summary>
            获取查询器
            </summary>
            <param name="contentType">内容类型</param>
            <param name="removeOutboundLinks">是否删除外链</param>
            <returns></returns>
        </member>
        <member name="P:Sop.Spider.DataStorage.DataFlowContext.Result">
            <summary>
            数据流处理结果
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.DataFlowContext.Item(System.String)">
            <summary>
            获取属性
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:Sop.Spider.DataStorage.DataFlowContext.Contains(System.String)">
            <summary>
            是否包含属性
            </summary>
            <param name="key">Key</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.DataFlowContext.Add(System.String,System.Object)">
            <summary>
            添加属性
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Sop.Spider.DataStorage.DataFlowContext.AddItem(System.String,System.Object)">
            <summary>
            添加数据项
            </summary>
            <param name="name">Name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Sop.Spider.DataStorage.DataFlowContext.GetItem(System.String)">
            <summary>
            获取数据项
            </summary>
            <param name="name">Name</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.DataFlowContext.GetItems">
            <summary>
            获取所有数据项
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.DataFlowContext.AddParseItem(System.String,Sop.Spider.Analyzer.IParseResult)">
            <summary>
            添加实体解析结果
            </summary>
            <param name="name">Name</param>
            <param name="value">实体结构结果</param>
        </member>
        <member name="M:Sop.Spider.DataStorage.DataFlowContext.GetParseItem(System.String)">
            <summary>
            获取实体结析结果项
            </summary>
            <param name="name">Name</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.DataFlowContext.GetParseItems">
            <summary>
            获取实体结析结果项
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sop.Spider.DataStorage.DataFlowContext.HasItems">
            <summary>
            是否包含数据项
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.DataFlowContext.HasParseItems">
            <summary>
            是否包含实体结析结果项
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.DataFlowContext.ClearItems">
            <summary>
            清空数据项
            </summary>
        </member>
        <member name="T:Sop.Spider.DataStorage.DataFlowResult">
            <summary>
            数据流处理器的处理结果
            </summary>
        </member>
        <member name="F:Sop.Spider.DataStorage.DataFlowResult.Success">
            <summary>
            数据处理正常结束
            </summary>
        </member>
        <member name="F:Sop.Spider.DataStorage.DataFlowResult.Failed">
            <summary>
            数据处理异常结束，会终止数据的流转
            </summary>
        </member>
        <member name="F:Sop.Spider.DataStorage.DataFlowResult.Terminated">
            <summary>
            数据处理结束，表示如果存在数据流转则不需要再流转下去
            </summary>
        </member>
        <member name="T:Sop.Spider.DataStorage.IDataFlow">
            <summary>
            数据流处理器
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.IDataFlow.Logger">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.IDataFlow.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.IDataFlow.InitAsync">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.IDataFlow.HandleAsync(Sop.Spider.DataStorage.DataFlowContext)">
            <summary>
            流处理
            </summary>
            <param name="context">处理上下文</param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.DataStorage.IndexMetadata">
            <summary>
            索引元数据
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.IndexMetadata.#ctor(System.String[],System.Boolean)">
            <summary>
            构造器
            </summary>
            <param name="columns">列</param>
            <param name="isUnique">是否唯一索引</param>
        </member>
        <member name="P:Sop.Spider.DataStorage.IndexMetadata.Name">
            <summary>
            索引名称
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.IndexMetadata.IsUnique">
            <summary>
            是否唯一索引
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.IndexMetadata.Columns">
            <summary>
            索引的列
            </summary>
        </member>
        <member name="T:Sop.Spider.DataStorage.Schema">
            <summary>
            数据库架构信息
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.Schema.Database">
            <summary>
            数据库名
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.Schema.Table">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.Schema.TablePostfix">
            <summary>
            表名后缀
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.Schema.TablePostfixFormat">
            <summary>
            自定义后缀
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.Schema.#ctor(System.String,System.String,Sop.Spider.DataStorage.TablePostfix,System.String)">
            <summary>
            数据库
            </summary>
            <param name="database">数据库名</param>
            <param name="table">表名</param>
            <param name="tablePostfix">表名后缀</param>
            <param name="tablePostfixFormat">自定义后缀</param>
        </member>
        <member name="T:Sop.Spider.DataStorage.TableMetadata">
            <summary>
            表元数据
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.TableMetadata.TypeName">
            <summary>
            实体类型名称
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.TableMetadata.Schema">
            <summary>
            Schema
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.TableMetadata.Primary">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.TableMetadata.Indexes">
            <summary>
            索引
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.TableMetadata.Updates">
            <summary>
            更新列
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.TableMetadata.Columns">
            <summary>
            属性名，属性数据类型的字典
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.TableMetadata.IsAutoIncrementPrimary">
            <summary>
            是否是自增主键
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.TableMetadata.IsPrimary(System.String)">
            <summary>
            判断某一列是否在主键中
            </summary>
            <param name="column">列</param>
            <returns></returns>
        </member>
        <member name="P:Sop.Spider.DataStorage.TableMetadata.HasPrimary">
            <summary>
            判断是否有主键
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.TableMetadata.HasUpdateColumns">
            <summary>
            判断是否有更新列
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.TableMetadata.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="T:Sop.Spider.DataStorage.TablePostfix">
            <summary>
            表名后缀
            </summary>
        </member>
        <member name="F:Sop.Spider.DataStorage.TablePostfix.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Sop.Spider.DataStorage.TablePostfix.Monday">
            <summary>
            表名的后缀为星期一的时间
            </summary>
        </member>
        <member name="F:Sop.Spider.DataStorage.TablePostfix.Today">
            <summary>
            表名的后缀为今天的时间 {name}_20171212
            </summary>
        </member>
        <member name="F:Sop.Spider.DataStorage.TablePostfix.Month">
            <summary>
            表名的后缀为当月 {name}_201712
            </summary>
        </member>
        <member name="F:Sop.Spider.DataStorage.TablePostfix.DateFormat">
            <summary>
            表名的后缀为自定义设置要求必须
            </summary>
        </member>
        <member name="T:Sop.Spider.DataStorage.ConsoleEntityStorage">
            <summary>
            控制台打印(实体)解析结果
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.ConsoleEntityStorage.CreateFromOptions(Sop.Spider.Common.SpiderOptions)">
            <summary>
            根据配置返回存储器
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.DataStorage.ConsoleStorage">
            <summary>
            控制台打印解析结果(所有解析结果)
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.ConsoleStorage.CreateFromOptions(Sop.Spider.Common.SpiderOptions)">
            <summary>
            根据配置返回存储器
            </summary>
            <param name="options">配置</param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.DataStorage.EntityFileStorageBase">
            <summary>
            实体解析结果的文件存储器
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.EntityFileStorageBase.Folder">
            <summary>
            存储的根文件夹
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.EntityFileStorageBase.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.EntityFileStorageBase.GetDataFolder(System.String)">
            <summary>
            获取存储文件夹
            </summary>
            <param name="ownerId">任务标识</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.EntityFileStorageBase.GetDataFile(Sop.Spider.DataStorage.DataFlowContext,Sop.Spider.DataStorage.TableMetadata,System.String)">
            <summary>
            获取数据文件路径
            </summary>
            <param name="dfc">数据上下文件</param>
            <param name="tableMetadata">表元数据</param>
            <param name="extension">文件扩展名</param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.DataStorage.EntityStorageBase">
            <summary>
            实体存储器
            </summary>
        </member>
        <member name="T:Sop.Spider.DataStorage.FileStorage">
            <summary>
            文件保存解析结果(所有解析结果)
            保存路径: [当前程序运行目录]/files/[任务标识]/[request.hash].data
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.FileStorage.CreateFromOptions(Sop.Spider.Common.SpiderOptions)">
            <summary>
            根据配置返回存储器
            </summary>
            <param name="options">配置</param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.DataStorage.FileStorageBase">
            <summary>
            解析结果的文件存储器
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.FileStorageBase.Writer">
            <summary>
            文件的写入器
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.FileStorageBase.Folder">
            <summary>
            存储的根文件夹
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.FileStorageBase.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.FileStorageBase.GetDataFolder(System.String)">
            <summary>
            获取存储文件夹
            </summary>
            <param name="ownerId">任务标识</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.FileStorageBase.CreateFile(System.String)">
            <summary>
            创建文件写入器
            </summary>
            <param name="file"></param>
        </member>
        <member name="T:Sop.Spider.DataStorage.JsonEntityFileStorage">
            <summary>
            JSON 文件保存解析(实体)结果
            保存路径: [当前程序运行目录]/files/[任务标识]/[request.hash].data
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.JsonEntityFileStorage.CreateFromOptions(Sop.Spider.Common.SpiderOptions)">
            <summary>
            根据配置返回存储器
            </summary>
            <param name="options">配置</param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.DataStorage.JsonFileStorage">
            <summary>
            JSON 文件保存解析结果(所有解析结果)
            保存路径: [当前程序运行目录]/files/[任务标识]/[request.hash].json
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.JsonFileStorage.CreateFromOptions(Sop.Spider.Common.SpiderOptions)">
            <summary>
            根据配置返回存储器
            </summary>
            <param name="options">配置</param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.DataStorage.MongoEntityStorage">
            <summary>
            MongoDB 保存解析(实体)结果 TODO: 是否要考虑存储模式：插入，新的插入旧的更新，更新 ETC
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.MongoEntityStorage.CreateFromOptions(Sop.Spider.Common.SpiderOptions)">
            <summary>
            根据配置返回存储器
            </summary>
            <param name="options">配置</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.MongoEntityStorage.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="connectionString">连接字符串</param>
        </member>
        <member name="P:Sop.Spider.DataStorage.MongoEntityStorage.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="T:Sop.Spider.DataStorage.MySqlEntityStorage">
            <summary>
            MySql 保存解析(实体)结果
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.MySqlEntityStorage.CreateFromOptions(Sop.Spider.Common.SpiderOptions)">
            <summary>
            根据配置返回存储器
            </summary>
            <param name="options">配置</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.MySqlEntityStorage.#ctor(Sop.Spider.DataStorage.StorageType,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="storageType">存储器类型</param>
            <param name="connectionString">连接字符串</param>
        </member>
        <member name="M:Sop.Spider.DataStorage.MySqlEntityStorage.CreateDbConnection(System.String)">
            <summary>
            创建数据库连接接口
            </summary>
            <param name="connectString">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.MySqlEntityStorage.GenerateSqlStatements(Sop.Spider.DataStorage.TableMetadata)">
            <summary>
            生成 SQL 语句
            </summary>
            <param name="tableMetadata">表元数据</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.MySqlEntityStorage.GenerateCreateDatabaseSql(Sop.Spider.DataStorage.TableMetadata)">
            <summary>
            生成创建数据库的 SQL 语句
            </summary>
            <param name="tableMetadata">表元数据</param>
            <returns>SQL 语句</returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.MySqlEntityStorage.GenerateCreateTableSql(Sop.Spider.DataStorage.TableMetadata)">
            <summary>
            生成创建表的 SQL 语句
            </summary>
            <param name="tableMetadata">表元数据</param>
            <returns>SQL 语句</returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.MySqlEntityStorage.GenerateInsertSql(Sop.Spider.DataStorage.TableMetadata,System.Boolean)">
            <summary>
            生成插入数据的 SQL 语句
            </summary>
            <param name="tableMetadata">表元数据</param>
            <param name="ignoreDuplicate">是否忽略重复键的数据</param>
            <returns>SQL 语句</returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.MySqlEntityStorage.GenerateUpdateSql(Sop.Spider.DataStorage.TableMetadata)">
            <summary>
            生成更新数据的 SQL 语句
            </summary>
            <param name="tableMetadata">表元数据</param>
            <returns>SQL 语句</returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.MySqlEntityStorage.GenerateInsertAndUpdateSql(Sop.Spider.DataStorage.TableMetadata)">
            <summary>
            生成插入新数据或者更新旧数据的 SQL 语句
            </summary>
            <param name="tableMetadata">表元数据</param>
            <returns>SQL 语句</returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.MySqlEntityStorage.GenerateTableSql(Sop.Spider.DataStorage.TableMetadata)">
            <summary>
            生成数据库名称的 SQL
            </summary>
            <param name="tableMetadata">表元数据</param>
            <returns>SQL 语句</returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.MySqlEntityStorage.GenerateColumnSql(Sop.Spider.DataStorage.Column,System.Boolean)">
            <summary>
            生成列的 SQL
            </summary>
            <returns>SQL 语句</returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.MySqlEntityStorage.GenerateDataTypeSql(System.String,System.Int32)">
            <summary>
            生成数据类型的 SQL
            </summary>
            <param name="type">数据类型</param>
            <param name="length">数据长度</param>
            <returns>SQL 语句</returns>
        </member>
        <member name="T:Sop.Spider.DataStorage.MySqlFileType">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="F:Sop.Spider.DataStorage.MySqlFileType.LoadFile">
            <summary>
            LOAD
            </summary>
        </member>
        <member name="F:Sop.Spider.DataStorage.MySqlFileType.InsertSql">
            <summary>
            INSERT SQL语句
            </summary>
        </member>
        <member name="T:Sop.Spider.DataStorage.MySqlFileEntityStorage">
            <summary>
            把解析到的爬虫实体数据存成 SQL 文件, 支持两种模式
            LoadFile 是批量导入模式通过命令 LOAD DATA LOCAL INFILE '{filePath}' INTO TABLE `{schema}`.`{dababase}` FIELDS TERMINATED BY '$'  ENCLOSED BY '#' LINES TERMINATED BY '@END@' IGNORE 1 LINES; 还原。
            InsertSql 是完整的 Insert SQL 语句, 需要一条条执行来导入数据
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.MySqlFileEntityStorage.IgnoreCase">
            <summary>
            数据库忽略大小写
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.MySqlFileEntityStorage.CreateFromOptions(Sop.Spider.Common.SpiderOptions)">
            <summary>
            根据配置返回存储器
            </summary>
            <param name="options">配置</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.MySqlFileEntityStorage.#ctor(Sop.Spider.DataStorage.MySqlFileType)">
            <summary>
            构造方法
            </summary>
            <param name="fileType">文件类型</param>
        </member>
        <member name="T:Sop.Spider.DataStorage.RelationalDatabaseEntityStorageBase">
            <summary>
            关系型数据库保存实体解析结果
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.RelationalDatabaseEntityStorageBase.CreateDbConnection(System.String)">
            <summary>
            创建数据库连接接口
            </summary>
            <param name="connectString">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.RelationalDatabaseEntityStorageBase.GenerateSqlStatements(Sop.Spider.DataStorage.TableMetadata)">
            <summary>
            生成 SQL 语句
            </summary>
            <param name="tableMetadata">表元数据</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.RelationalDatabaseEntityStorageBase.EnsureDatabaseAndTableCreated(System.Data.IDbConnection,Sop.Spider.DataStorage.SqlStatements)">
            <summary>
            创建数据库和表
            </summary>
            <param name="conn">数据库连接</param>
            <param name="sqlStatements">SQL 语句</param>
        </member>
        <member name="M:Sop.Spider.DataStorage.RelationalDatabaseEntityStorageBase.#ctor(Sop.Spider.DataStorage.StorageType,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="storageType">存储器类型</param>
            <param name="connectionString">连接字符串</param>
        </member>
        <member name="P:Sop.Spider.DataStorage.RelationalDatabaseEntityStorageBase.StorageType">
            <summary>
            存储器类型
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.RelationalDatabaseEntityStorageBase.RetryTimes">
            <summary>
            数据库操作重试次数
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.RelationalDatabaseEntityStorageBase.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.RelationalDatabaseEntityStorageBase.UseTransaction">
            <summary>
            是否使用事务操作。默认不使用。
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.RelationalDatabaseEntityStorageBase.IgnoreCase">
            <summary>
            数据库忽略大小写
            </summary>
        </member>
        <member name="T:Sop.Spider.DataStorage.SqlServerVersion">
            <summary>
            数据库版本
            </summary>
        </member>
        <member name="T:Sop.Spider.DataStorage.SqlServerEntityStorage">
            <summary>
            SqlServer 保存解析(实体)结果
            </summary>
        </member>
        <member name="M:Sop.Spider.DataStorage.SqlServerEntityStorage.CreateFromOptions(Sop.Spider.Common.SpiderOptions)">
            <summary>
            根据配置返回存储器
            </summary>
            <param name="options">配置</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.SqlServerEntityStorage.#ctor(Sop.Spider.DataStorage.StorageType,System.String,Sop.Spider.DataStorage.SqlServerVersion)">
            <summary>
            构造方法
            </summary>
            <param name="storageType">存储器类型</param>
            <param name="connectionString">连接字符串</param>
            <param name="version">数据库版本</param>
        </member>
        <member name="M:Sop.Spider.DataStorage.SqlServerEntityStorage.CreateDbConnection(System.String)">
            <summary>
            创建数据库连接接口
            </summary>
            <param name="connectString">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.SqlServerEntityStorage.GenerateSqlStatements(Sop.Spider.DataStorage.TableMetadata)">
            <summary>
            生成 SQL 语句
            </summary>
            <param name="tableMetadata">表元数据</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.SqlServerEntityStorage.GenerateCreateDatabaseSql(Sop.Spider.DataStorage.TableMetadata)">
            <summary>
            生成创建数据库的 SQL 语句
            </summary>
            <param name="tableMetadata">表元数据</param>
            <returns>SQL 语句</returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.SqlServerEntityStorage.GenerateCreateTableSql(Sop.Spider.DataStorage.TableMetadata)">
            <summary>
            生成创建表的 SQL 语句
            </summary>
            <param name="tableMetadata">表元数据</param>
            <returns>SQL 语句</returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.SqlServerEntityStorage.GenerateInsertSql(Sop.Spider.DataStorage.TableMetadata)">
            <summary>
            生成插入数据的 SQL 语句
            </summary>
            <param name="tableMetadata">表元数据</param>
            <returns>SQL 语句</returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.SqlServerEntityStorage.GenerateUpdateSql(Sop.Spider.DataStorage.TableMetadata)">
            <summary>
            生成更新数据的 SQL 语句
            </summary>
            <param name="tableMetadata">表元数据</param>
            <returns>SQL 语句</returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.SqlServerEntityStorage.GenerateInsertAndUpdateSql(Sop.Spider.DataStorage.TableMetadata)">
            <summary>
            生成插入新数据或者更新旧数据的 SQL 语句
            </summary>
            <param name="tableMetadata">表元数据</param>
            <returns>SQL 语句</returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.SqlServerEntityStorage.GenerateTableSql(Sop.Spider.DataStorage.TableMetadata)">
            <summary>
            生成数据库名称的 SQL
            </summary>
            <param name="tableMetadata">表元数据</param>
            <returns>SQL 语句</returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.SqlServerEntityStorage.GenerateColumnSql(Sop.Spider.DataStorage.Column,System.Boolean)">
            <summary>
            生成列的 SQL
            </summary>
            <returns>SQL 语句</returns>
        </member>
        <member name="M:Sop.Spider.DataStorage.SqlServerEntityStorage.GenerateDataTypeSql(System.String,System.Int32)">
            <summary>
            生成数据类型的 SQL
            </summary>
            <param name="type">数据类型</param>
            <param name="length">数据长度</param>
            <returns>SQL 语句</returns>
        </member>
        <member name="T:Sop.Spider.DataStorage.SqlStatements">
            <summary>
            SQL 语句
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.SqlStatements.DatabaseSql">
            <summary>
            数据库名称 SQL
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.SqlStatements.CreateTableSql">
            <summary>
            创建表的 SQL 语句
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.SqlStatements.CreateDatabaseSql">
            <summary>
            创建数据库的 SQL 语句
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.SqlStatements.InsertSql">
            <summary>
            插入的 SQL 语句
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.SqlStatements.InsertIgnoreDuplicateSql">
            <summary>
            插入并且忽略重复数据的 SQL 语句
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.SqlStatements.UpdateSql">
            <summary>
            更新的 SQL 语句
            </summary>
        </member>
        <member name="P:Sop.Spider.DataStorage.SqlStatements.InsertAndUpdateSql">
            <summary>
            插入新的或者更新旧的数据 SQL 语句
            </summary>
        </member>
        <member name="T:Sop.Spider.DataStorage.StorageBase">
            <summary>
            存储器
            </summary>
        </member>
        <member name="T:Sop.Spider.DataStorage.StorageType">
            <summary>
            存储器类型
            </summary>
        </member>
        <member name="F:Sop.Spider.DataStorage.StorageType.Insert">
            <summary>
            直接执行插入
            </summary>
        </member>
        <member name="F:Sop.Spider.DataStorage.StorageType.InsertIgnoreDuplicate">
            <summary>
            插入不重复数据
            </summary>
        </member>
        <member name="F:Sop.Spider.DataStorage.StorageType.InsertAndUpdate">
            <summary>
            如果主键不存在则插入, 如果存在则更新
            </summary>
        </member>
        <member name="F:Sop.Spider.DataStorage.StorageType.Update">
            <summary>
            直接更新
            </summary>
        </member>
        <member name="T:Sop.Spider.EntityBase`1">
            <summary>
            实体基类（解析实体）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Sop.Spider.EntityBase`1.GetTableMetadata">
            <summary>
            获取实体的表数据,创建表结构
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.EntityBase`1.Configure">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sop.Spider.EntityBase`1.HasIndex(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            索引
            </summary>
            <param name="indexExpression"></param>
            <param name="isUnique"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.EntityBase`1.ConfigureUpdateColumns(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            
            </summary>
            <param name="indexExpression"></param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.DownloadAgentRegisterCenter.DefaultDownloadAgentRegisterCenter">
            <summary>
            下载中心
            </summary>
        </member>
        <member name="M:Sop.Spider.DownloadAgentRegisterCenter.DefaultDownloadAgentRegisterCenter.#ctor(Sop.Spider.EventBus.IEventBus,Sop.Spider.DownloadAgentRegisterCenter.IDownloadAgentStore,Sop.Spider.Common.SpiderOptions,Microsoft.Extensions.Logging.ILogger{Sop.Spider.DownloadAgentRegisterCenter.DefaultDownloadAgentRegisterCenter})">
            <summary>
            构造方法
            </summary>
            <param name="eventBus">消息队列</param>
            <param name="downloaderAgentStore">下载器代理存储</param>
            <param name="options">系统选项</param>
            <param name="logger">日志接口</param>
        </member>
        <member name="T:Sop.Spider.DownloadAgentRegisterCenter.DownloadAgentRegisterCenterBase">
            <summary>
            下载中心
            </summary>
        </member>
        <member name="F:Sop.Spider.DownloadAgentRegisterCenter.DownloadAgentRegisterCenterBase.EventBus">
            <summary>
            消息队列
            </summary>
        </member>
        <member name="F:Sop.Spider.DownloadAgentRegisterCenter.DownloadAgentRegisterCenterBase.Options">
            <summary>
            系统选项
            </summary>
        </member>
        <member name="F:Sop.Spider.DownloadAgentRegisterCenter.DownloadAgentRegisterCenterBase.Logger">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="F:Sop.Spider.DownloadAgentRegisterCenter.DownloadAgentRegisterCenterBase.DownloadAgentStore">
            <summary>
            下载器代理存储
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgentRegisterCenter.DownloadAgentRegisterCenterBase.IsRunning">
            <summary>
            是否运行中
            </summary>
        </member>
        <member name="M:Sop.Spider.DownloadAgentRegisterCenter.DownloadAgentRegisterCenterBase.#ctor(Sop.Spider.EventBus.IEventBus,Sop.Spider.DownloadAgentRegisterCenter.IDownloadAgentStore,Sop.Spider.Common.SpiderOptions,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            构造方法
            </summary>
            <param name="eventBus">消息队列</param>
            <param name="downloaderAgentStore">下载器代理存储</param>
            <param name="options">系统选项</param>
            <param name="logger">日志接口</param>
        </member>
        <member name="M:Sop.Spider.DownloadAgentRegisterCenter.DownloadAgentRegisterCenterBase.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            异步执行取消操作
            </summary>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DownloadAgentRegisterCenter.DownloadAgentRegisterCenterBase.StopAsync(System.Threading.CancellationToken)">
            <summary>
            异步停止
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.DownloadAgentRegisterCenter.Entity.DownloadAgent">
            <summary>
            下载器代理
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgentRegisterCenter.Entity.DownloadAgent.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgentRegisterCenter.Entity.DownloadAgent.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgentRegisterCenter.Entity.DownloadAgent.ProcessorCount">
            <summary>
            CPU 核心数
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgentRegisterCenter.Entity.DownloadAgent.TotalMemory">
            <summary>
            总内存
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgentRegisterCenter.Entity.DownloadAgent.LastModificationTime">
            <summary>
            上一次更新时间
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgentRegisterCenter.Entity.DownloadAgent.IsDeleted">
            <summary>
            是否已经标记删除
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgentRegisterCenter.Entity.DownloadAgent.CreationTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="M:Sop.Spider.DownloadAgentRegisterCenter.Entity.DownloadAgent.RefreshLastModificationTime">
            <summary>
            刷新上一次更新时间
            </summary>
        </member>
        <member name="T:Sop.Spider.DownloadAgentRegisterCenter.Entity.DownloadAgentHeartbeat">
            <summary>
            下载器代理心跳
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgentRegisterCenter.Entity.DownloadAgentHeartbeat.AgentId">
            <summary>
            标识
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgentRegisterCenter.Entity.DownloadAgentHeartbeat.AgentName">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgentRegisterCenter.Entity.DownloadAgentHeartbeat.FreeMemory">
            <summary>
            空闲内存
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgentRegisterCenter.Entity.DownloadAgentHeartbeat.DownloadCount">
            <summary>
            已经分配的下载器数量
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgentRegisterCenter.Entity.DownloadAgentHeartbeat.CreationTime">
            <summary>
            上报时间
            </summary>
        </member>
        <member name="T:Sop.Spider.DownloadAgentRegisterCenter.IDownloadAgentRegisterCenter">
            <summary>
            下载中心
            </summary>
        </member>
        <member name="T:Sop.Spider.DownloadAgentRegisterCenter.IDownloadAgentStore">
            <summary>
            下载器代理存储接口
            </summary>
        </member>
        <member name="M:Sop.Spider.DownloadAgentRegisterCenter.IDownloadAgentStore.EnsureDatabaseAndTableCreatedAsync">
            <summary>
            创建数据库和表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DownloadAgentRegisterCenter.IDownloadAgentStore.GetAllListAsync">
            <summary>
            查询所有已经注册的下载器代理
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DownloadAgentRegisterCenter.IDownloadAgentStore.RegisterAsync(Sop.Spider.DownloadAgentRegisterCenter.Entity.DownloadAgent)">
            <summary>
            添加下载器代理
            </summary>
            <param name="agent">下载器代理</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DownloadAgentRegisterCenter.IDownloadAgentStore.HeartbeatAsync(Sop.Spider.DownloadAgentRegisterCenter.Entity.DownloadAgentHeartbeat)">
            <summary>
            保存下载器代理的心跳
            </summary>
            <param name="heartbeat">下载器代理心跳</param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.DownloadAgentRegisterCenter.Internal.LocalDownloadAgentStore">
            <summary>
            本地下载器代理存储
            </summary>
        </member>
        <member name="M:Sop.Spider.DownloadAgentRegisterCenter.Internal.LocalDownloadAgentStore.HeartbeatAsync(Sop.Spider.DownloadAgentRegisterCenter.Entity.DownloadAgentHeartbeat)">
            <summary>
            本地代理不需要留存心跳
            </summary>
            <param name="heartbeat"></param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.DownloadAgent.DefaultDownloadAgent">
            <summary>
            默认下载器代理
            </summary>
        </member>
        <member name="T:Sop.Spider.DownloadAgent.DownloadAgentBase">
            <summary>
            下载器代理基类
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgent.DownloadAgentBase.Logger">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgent.DownloadAgentBase.ConfigureDownload">
            <summary>
            配置下载器
            </summary>
        </member>
        <member name="M:Sop.Spider.DownloadAgent.DownloadAgentBase.#ctor(Sop.Spider.DownloadAgent.DownloadAgentOptions,Sop.Spider.Common.SpiderOptions,Sop.Spider.EventBus.IEventBus,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            构造方法
            </summary>
            <param name="options">下载器代理选项</param>
            <param name="spiderOptions"></param>
            <param name="eventBus">消息队列</param>
            <param name="logger">日志接口</param>
        </member>
        <member name="M:Sop.Spider.DownloadAgent.DownloadAgentBase.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            异步执行
            </summary>
            <param name="stoppingToken">取消操作</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.DownloadAgent.DownloadAgentBase.SubscribeMessage">
            <summary>
            订阅消息
            </summary>
        </member>
        <member name="M:Sop.Spider.DownloadAgent.DownloadAgentBase.GetDownloaded(Sop.Spider.Download.Request)">
            <summary>
            分配下载器
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.DownloadAgent.DownloadAgentOptions">
            <summary>
            下载器代理选项
            </summary>
        </member>
        <member name="M:Sop.Spider.DownloadAgent.DownloadAgentOptions.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造方法
            </summary>
            <param name="configuration">配置接口</param>
        </member>
        <member name="P:Sop.Spider.DownloadAgent.DownloadAgentOptions.SupportAdsl">
            <summary>
            是否支持 ADSL 拨号
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgent.DownloadAgentOptions.IgnoreRedialForTest">
            <summary>
            是否忽略拨号，用于测试
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgent.DownloadAgentOptions.RedialIntervalLimit">
            <summary>
            拨号间隔限制
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgent.DownloadAgentOptions.AgentId">
            <summary>
            下载器代理标识
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgent.DownloadAgentOptions.Name">
            <summary>
            下载器代理名称
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgent.DownloadAgentOptions.AdslInterface">
            <summary>
            ADSL 网络接口
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgent.DownloadAgentOptions.AdslAccount">
            <summary>
            ADSL 帐号
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgent.DownloadAgentOptions.AdslPassword">
            <summary>
            ADSL 密码
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgent.DownloadAgentOptions.ProxySupplyUrl">
            <summary>
            代理供应接口
            </summary>
        </member>
        <member name="P:Sop.Spider.DownloadAgent.DownloadAgentOptions.MessageAttempts">
            <summary>
            请求结果插入队列尝试次数
            </summary>
        </member>
        <member name="T:Sop.Spider.DownloadAgent.IDownloadAgent">
            <summary>
            下载器代理
            </summary>
        </member>
        <member name="T:Sop.Spider.DownloadAgent.LocalDownloadedAgent">
            <summary>
            本地下器代理
            </summary>
        </member>
        <member name="M:Sop.Spider.DownloadAgent.LocalDownloadedAgent.#ctor(Sop.Spider.DownloadAgent.DownloadAgentOptions,Sop.Spider.Common.SpiderOptions,Sop.Spider.EventBus.IEventBus,Microsoft.Extensions.Logging.ILogger{Sop.Spider.DownloadAgent.LocalDownloadedAgent})">
            <summary>
            构造方法
            </summary>
            <param name="options">下载器代理选项</param>
            <param name="spiderOptions"></param>
            <param name="eventBus">消息队列</param>
            <param name="logger">日志接口</param>
        </member>
        <member name="T:Sop.Spider.Download.DownloadedBase">
            <summary>
            下载器基类
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DownloadedBase.Logger">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DownloadedBase.AgentId">
            <summary>
            下载器代理标识
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DownloadedBase.LastUsedTime">
            <summary>
            最后一次使用时间
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DownloadedBase.DownloadFile">
            <summary>
            是否下载文件
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DownloadedBase.ExcludeMediaTypes">
            <summary>
            What mediatype should not be treated as file to download.
            </summary>
            <summary xml:lang="zh-CN">
            定义哪些类型的内容不需要当成文件下载
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DownloadedBase.HttpProxyPool">
            <summary>
            代理池
            </summary>
        </member>
        <member name="M:Sop.Spider.Download.DownloadedBase.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Sop.Spider.Download.DownloadedBase.StorageFile(Sop.Spider.Download.Request,System.Byte[])">
            <summary>
            存储文件
            </summary>
            <param name="request"></param>
            <param name="bytes"></param>
        </member>
        <member name="M:Sop.Spider.Download.DownloadedBase.DownloadAsync(Sop.Spider.Download.Request)">
            <summary>
            异步下载
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.Download.DownloadSettings">
            <summary>
            下载器配置
            </summary>
        </member>
        <member name="F:Sop.Spider.Download.DownloadSettings._cookies">
            <summary>
            Cookies
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DownloadSettings.Type">
            <summary>
            下载器类型
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DownloadSettings.DownloadPolicy">
            <summary>
            下载器分配策略
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DownloadSettings.Cookies">
            <summary>
            Cookie
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DownloadSettings.UseProxy">
            <summary>
            是否使用代理
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DownloadSettings.UseCookies">
            <summary>
            是否使用 Cookie
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DownloadSettings.AllowAutoRedirect">
            <summary>
            是否自动跳转
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DownloadSettings.Timeout">
            <summary>
            下载超时
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DownloadSettings.DecodeHtml">
            <summary>
            是否进行 HTML 转码
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DownloadSettings.DownloadCount">
            <summary>
            所需分配的下载器字数
            </summary>
        </member>
        <member name="M:Sop.Spider.Download.DownloadSettings.AddCookie(System.String,System.String,System.String,System.String)">
            <summary>
            Add one cookie to downloader
            </summary>
            <summary xml:lang="zh-CN">
            添加Cookie
            </summary>
            <param name="name">名称(<see cref="P:Sop.Spider.Common.Cookie.Name"/>)</param>
            <param name="value">值(<see cref="P:Sop.Spider.Common.Cookie.Value"/>)</param>
            <param name="domain">作用域(<see cref="P:Sop.Spider.Common.Cookie.Domain"/>)</param>
            <param name="path">作用路径(<see cref="P:Sop.Spider.Common.Cookie.Path"/>)</param>
        </member>
        <member name="M:Sop.Spider.Download.DownloadSettings.AddCookies(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Add cookies to downloader
            </summary>
            <summary xml:lang="zh-CN">
            添加Cookies
            </summary>
            <param name="cookies">Cookies的键值对 (Cookie's key-value pairs)</param>
            <param name="domain">作用域(<see cref="P:Sop.Spider.Common.Cookie.Domain"/>)</param>
            <param name="path">作用路径(<see cref="P:Sop.Spider.Common.Cookie.Path"/>)</param>
        </member>
        <member name="M:Sop.Spider.Download.DownloadSettings.AddCookies(System.String,System.String,System.String)">
            <summary>
            Add cookies to downloader
            </summary>
            <summary xml:lang="zh-CN">
            设置 Cookies
            </summary>
            <param name="cookies">Cookies的键值对字符串, 如: a1=b;a2=c;(Cookie's key-value pairs string, a1=b;a2=c; etc.)</param>
            <param name="domain">作用域(<see cref="P:Sop.Spider.Common.Cookie.Domain"/>)</param>
            <param name="path">作用路径(<see cref="P:Sop.Spider.Common.Cookie.Path"/>)</param>
        </member>
        <member name="M:Sop.Spider.Download.DownloadSettings.AddCookie(Sop.Spider.Common.Cookie)">
            <summary>
            Add one cookie to downloader
            </summary>
            <summary xml:lang="zh-CN">
            设置 Cookie
            </summary>
            <param name="cookie">Cookie</param>
        </member>
        <member name="T:Sop.Spider.Download.HttpClientDownloaded">
            <summary>
            基于 HttpClient 实现的下载器
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.HttpClientDownloaded.AllowAutoRedirect">
            <summary>
            是否自动跳转
            </summary>
        </member>
        <member name="M:Sop.Spider.Download.HttpClientDownloaded.ImplDownloadAsync(Sop.Spider.Download.Request)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Download.HttpClientDownloaded.ReadContent(Sop.Spider.Download.Request,System.Byte[],System.String)">
            <summary>
            获取内容
            </summary>
            <param name="request"></param>
            <param name="contentBytes"></param>
            <param name="characterSet"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Download.HttpClientDownloaded.CompressContent(Sop.Spider.Download.Request)">
            <summary>
            压缩内容
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Download.HttpClientDownloaded.GenerateHttpRequestMessage(Sop.Spider.Download.Request)">
            <summary>
            生成请求信息
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Download.HttpClientDownloaded.GetHttpClientEntry(System.String,System.Net.IWebProxy)">
            <summary>
            Return same <see cref="T:Sop.Spider.Download.HttpClientDownloaded.HttpClientEntry"/> instance when <paramref name="hash"/> is same.
            This can ensure some pages have same CookieContainer.
            </summary>
            <summary xml:lang="zh-CN">
            通过不同的Hash分组, 返回对应的HttpClient
            设计初衷: 某些网站会对COOKIE某部分做承上启下的检测, 因此必须保证: www.a.com/keyword=xxxx&amp;page=1 www.a.com/keyword=xxxx&amp;page=2 在同一个HttpClient里访问
            </summary>
            <param name="hash">分组的哈希 Hashcode to identify different group.</param>
            <param name="proxy">代理</param>
            <returns>HttpClientItem</returns>
        </member>
        <member name="T:Sop.Spider.Download.IDownloaded">
            <summary>
            下载器
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.IDownloaded.Logger">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.IDownloaded.AgentId">
            <summary>
            下载器代理标识
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.IDownloaded.LastUsedTime">
            <summary>
            最后一次使用时间
            </summary>
        </member>
        <member name="M:Sop.Spider.Download.IDownloaded.AddCookies(Sop.Spider.Common.Cookie[])">
            <summary>
            添加 Cookie
            </summary>
            <param name="cookies"></param>
        </member>
        <member name="P:Sop.Spider.Download.IDownloaded.HttpProxyPool">
            <summary>
            代理池
            </summary>
        </member>
        <member name="M:Sop.Spider.Download.IDownloaded.DownloadAsync(Sop.Spider.Download.Request)">
            <summary>
            下载
            </summary>
            <param name="request">请求</param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.Download.IProxySupplier">
            <summary>
            代理提供接口
            </summary>
        </member>
        <member name="M:Sop.Spider.Download.IProxySupplier.GetProxies">
            <summary>
            获取所有代理
            </summary>
            <returns>代理</returns>
        </member>
        <member name="T:Sop.Spider.Download.DefaultProxyValidator">
            <summary>
            验证代理是否正常
            </summary>
        </member>
        <member name="T:Sop.Spider.Download.DefaultProxyValidator.ProxyValidator">
            <summary>
            代理验证器
            提供代理的验证
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DefaultProxyValidator.ProxyValidator.WebProxy">
            <summary>
            获取代理
            </summary>
        </member>
        <member name="M:Sop.Spider.Download.DefaultProxyValidator.ProxyValidator.#ctor(System.String,System.Int32)">
            <summary>
            代理验证器
            </summary>
            <param name="proxyHost">代理服务器域名或ip</param>
            <param name="proxyPort">代理服务器端口</param>
        </member>
        <member name="M:Sop.Spider.Download.DefaultProxyValidator.ProxyValidator.#ctor(System.Net.IWebProxy)">
            <summary>
            代理验证器
            </summary>
            <param name="webProxy">代理</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sop.Spider.Download.DefaultProxyValidator.ProxyValidator.Validate(System.Uri,System.Nullable{System.TimeSpan})">
            <summary>
            使用http tunnel检测代理状态
            </summary>
            <param name="targetAddress">目标地址，可以是http或https</param>
            <param name="timeout">发送或等待数据的超时时间</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Download.DefaultProxyValidator.ProxyValidator.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Download.DefaultProxyValidator.ProxyValidator.Validate(System.Net.IWebProxy,System.Uri,System.Nullable{System.TimeSpan})">
            <summary>
            使用http tunnel检测代理状态
            </summary>
            <param name="webProxy">web代理</param>      
            <param name="targetAddress">目标地址，可以是http或https</param>
            <param name="timeout">发送或等待数据的超时时间</param>
            <exception cref="T:System.ArgumentNullException"></exception>    
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.Download.DefaultProxyValidator.HttpProxy">
            <summary>
            表示http代理信息
            </summary>
        </member>
        <member name="F:Sop.Spider.Download.DefaultProxyValidator.HttpProxy._credentials">
            <summary>
            授权字段
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DefaultProxyValidator.HttpProxy.Host">
            <summary>
            获取代理服务器域名或ip
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DefaultProxyValidator.HttpProxy.Port">
            <summary>
            获取代理服务器端口
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DefaultProxyValidator.HttpProxy.UserName">
            <summary>
            获取代理服务器账号
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DefaultProxyValidator.HttpProxy.Password">
            <summary>
            获取代理服务器密码
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.DefaultProxyValidator.HttpProxy.System#Net#IWebProxy#Credentials">
            <summary>
            获取或设置授权信息
            </summary>
        </member>
        <member name="M:Sop.Spider.Download.DefaultProxyValidator.HttpProxy.#ctor(System.String)">
            <summary>
            http代理信息
            </summary>
            <param name="proxyAddress">代理服务器地址</param>
        </member>
        <member name="M:Sop.Spider.Download.DefaultProxyValidator.HttpProxy.#ctor(System.Uri)">
            <summary>
            http代理信息
            </summary>
            <param name="proxyAddress">代理服务器地址</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sop.Spider.Download.DefaultProxyValidator.HttpProxy.#ctor(System.String,System.Int32)">
            <summary>
            http代理信息
            </summary>
            <param name="host">代理服务器域名或ip</param>
            <param name="port">代理服务器端口</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sop.Spider.Download.DefaultProxyValidator.HttpProxy.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            http代理信息
            </summary>
            <param name="host">代理服务器域名或ip</param>
            <param name="port">代理服务器端口</param>
            <param name="userName">代理服务器账号</param>
            <param name="password">代理服务器密码</param>
        </member>
        <member name="M:Sop.Spider.Download.DefaultProxyValidator.HttpProxy.SetCredentialsByInterface(System.Net.ICredentials)">
            <summary>
            通过接口设置授权信息
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sop.Spider.Download.DefaultProxyValidator.HttpProxy.ToTunnelRequestString(System.Uri)">
            <summary>
            转换Http Tunnel请求字符串
            </summary>      
            <param name="targetAddress">目标url地址</param>
        </member>
        <member name="M:Sop.Spider.Download.DefaultProxyValidator.HttpProxy.GetProxy(System.Uri)">
            <summary>
            获取代理服务器地址
            </summary>
            <param name="destination">目标地址</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Download.DefaultProxyValidator.HttpProxy.IsBypassed(System.Uri)">
            <summary>
            是否忽略代理
            </summary>
            <param name="host">目标地址</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Download.DefaultProxyValidator.HttpProxy.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Download.DefaultProxyValidator.HttpProxy.FromWebProxy(System.Net.IWebProxy,System.Uri)">
            <summary>
            从IWebProxy实例转换获得
            </summary>
            <param name="webProxy">IWebProxy</param>
            <param name="targetAddress">目标url地址</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.Download.HttpProxyPool">
            <summary>
            代理池
            </summary>
        </member>
        <member name="M:Sop.Spider.Download.HttpProxyPool.#ctor(Sop.Spider.Download.IProxySupplier,System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="supplier">代理提供接口</param>
            <param name="reuseInterval">代理不被再次使用的间隔</param>
        </member>
        <member name="M:Sop.Spider.Download.HttpProxyPool.GetProxy">
            <summary>
            从代理池中取一个代理
            </summary>
            <returns>代理</returns>
        </member>
        <member name="M:Sop.Spider.Download.HttpProxyPool.ReturnProxy(System.Net.WebProxy,System.Net.HttpStatusCode)">
            <summary>
            把代理返回给代理池
            </summary>
            <param name="proxy">代理</param>
            <param name="statusCode">通过此代理请求数据后的返回状态</param>
        </member>
        <member name="M:Sop.Spider.Download.HttpProxyPool.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Sop.Spider.Download.IHttpProxyPool">
            <summary>
            代理池
            </summary>
        </member>
        <member name="M:Sop.Spider.Download.IHttpProxyPool.GetProxy">
            <summary>
            从代理池中取一个代理
            </summary>
            <returns>代理</returns>
        </member>
        <member name="M:Sop.Spider.Download.IHttpProxyPool.ReturnProxy(System.Net.WebProxy,System.Net.HttpStatusCode)">
            <summary>
            把代理返回给代理池
            </summary>
            <param name="proxy">代理</param>
            <param name="statusCode">通过此代理请求数据后的返回状态</param>
        </member>
        <member name="T:Sop.Spider.Download.IProxyValidator">
            <summary>
            代理验证器
            </summary>
        </member>
        <member name="M:Sop.Spider.Download.IProxyValidator.IsAvailable(System.Net.WebProxy)">
            <summary>
            判断代理是否可用
            </summary>
            <param name="proxy">代理</param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.Download.Proxy">
            <summary>
            代理信息
            </summary>
        </member>
        <member name="F:Sop.Spider.Download.Proxy.WebProxy">
            <summary>
            实际代理信息
            </summary>
        </member>
        <member name="F:Sop.Spider.Download.Proxy.CanReuseTime">
            <summary>
            下一次可使用的时间
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Proxy.ResponseTime">
            <summary>
            通过代理完成一次下载操作消耗的时间
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Proxy.FailedNum">
            <summary>
            使用此代理下载数据的失败次数
            </summary>
        </member>
        <member name="M:Sop.Spider.Download.Proxy.#ctor(System.Net.WebProxy,System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="proxy">实际代理信息</param>
            <param name="reuseTimeInterval">代理不被再次使用的间隔</param>
        </member>
        <member name="M:Sop.Spider.Download.Proxy.GetLastUseTime">
            <summary>
            获取上一次使用的时间
            </summary>
            <returns>上一次使用的时间</returns>
        </member>
        <member name="M:Sop.Spider.Download.Proxy.SetLastBorrowTime(System.Double)">
            <summary>
            设置上一次使用的时间
            </summary>
            <param name="lastBorrowTime">上一次使用的时间</param>
        </member>
        <member name="M:Sop.Spider.Download.Proxy.RecordResponse">
            <summary>
            计算通过代理完成一次下载操作消耗的时间
            </summary>
        </member>
        <member name="M:Sop.Spider.Download.Proxy.Fail">
            <summary>
            记录一次使用此代理下载数据的失败
            </summary>
        </member>
        <member name="M:Sop.Spider.Download.Proxy.GetWebProxy">
            <summary>
            取得实际代理信息
            </summary>
            <returns>实际代理信息</returns>
        </member>
        <member name="M:Sop.Spider.Download.Proxy.SetFailedNum(System.Int32)">
            <summary>
            设置使用此代理下载数据的失败次数
            </summary>
            <param name="num">次数</param>
        </member>
        <member name="M:Sop.Spider.Download.Proxy.SetReuseTime(System.Int32)">
            <summary>
            设置下一次可使用的时间
            </summary>
            <param name="reuseTimeInterval">代理不被再次使用的间隔</param>
        </member>
        <member name="T:Sop.Spider.Download.Request">
            <summary>
            请求
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.Hash">
            <summary>
            请求的 HASH 值
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.OwnerId">
            <summary>
            任务标识
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.AgentId">
            <summary>
            下载器代理标识
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.Depth">
            <summary>
            链接的深度，用户不得修改
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.DownloadType">
            <summary>
            下载器类别
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.DecodeHtml">
            <summary>
            下载内容是否需要解码
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.Url">
            <summary>
            请求链接
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.ChangeIpPattern">
            <summary>
            判断是否需要切换 IP 的正则表达式
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.UserAgent">
            <summary>
            User-Agent
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.Referer">
            <summary>
            请求链接时Referer参数的值
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.Origin">
            <summary>
            请求链接时Origin参数的值
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.Accept">
            <summary>
            Accept
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.ContentType">
            <summary>
            仅在发送 POST 请求时需要设置
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.UseProxy">
            <summary>
            是否使用代理
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.UseCookies">
            <summary>
            是否使用 Cookie
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.AllowAutoRedirect">
            <summary>
            是否自动跳转
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.Cookie">
            <summary>
            设置 Cookie
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.Timeout">
            <summary>
            下载超时
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.RetryTimes">
            <summary>
            下载重试次数
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.RetriedTimes">
            <summary>
            已经重试的次数
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.UseAdsl">
            <summary>
            是否使用 ADSL 下载器
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.Headers">
            <summary>
            Headers
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.Encoding">
            <summary>
            字符编码
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.Body">
            <summary>
            请求的 Body
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.Method">
            <summary>
            请求的方法
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.Compression">
            <summary>
            是否需要用压缩方法发送 Body
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.CreationTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.DownloadPolicy">
            <summary>
            下载策略
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Request.Domain">
            <summary>
            设置 Cookie 的 domain
            </summary>
        </member>
        <member name="M:Sop.Spider.Download.Request.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Sop.Spider.Download.Request.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="url">链接</param>
        </member>
        <member name="M:Sop.Spider.Download.Request.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            构造方法
            </summary>
            <param name="url">链接</param>
            <param name="properties">额外属性</param>
        </member>
        <member name="M:Sop.Spider.Download.Request.AddProperty(System.String,System.String)">
            <summary>
            设置此链接的额外信息
            </summary>
            <param name="key">键值</param>
            <param name="value">额外信息</param>
        </member>
        <member name="M:Sop.Spider.Download.Request.AddProperty(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            添加属性
            </summary>
            <param name="dict">属性</param>
        </member>
        <member name="M:Sop.Spider.Download.Request.GetProperty(System.String)">
            <summary>
            获取属性
            </summary>
            <param name="key">Key</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Download.Request.AddHeader(System.String,System.String)">
            <summary>
            设置请求头
            </summary>
            <param name="key">请求头</param>
            <param name="value">请求值</param>
        </member>
        <member name="M:Sop.Spider.Download.Request.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Sop.Spider.Download.Request.ComputeHash">
            <summary>
            Hash 放在客户端计算的原因是调度器可能是分布式的。不能随意去调整服务端的代码。
            </summary>
        </member>
        <member name="T:Sop.Spider.Download.Response">
            <summary>
            下载结果
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Response.Request">
            <summary>
            请求链接
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Response.Exception">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Response.RawText">
            <summary>
            下载内容
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Response.AgentId">
            <summary>
            下载器代理标识
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Response.TargetUrl">
            <summary>
            最终请求的链接, 当发生302跳转时可能与请求的Url不一致
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Response.Success">
            <summary>
            是否下载成功
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.Response.ElapsedMilliseconds">
            <summary>
            下载消耗的时间
            </summary>
        </member>
        <member name="T:Sop.Spider.Download.ResponseExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="T:Sop.Spider.Download.WebDriverDownloaded">
            <summary>
            WebDriverDownloaded
            </summary>
        </member>
        <member name="P:Sop.Spider.Download.WebDriverDownloaded.AllowAutoRedirect">
            <summary>
            是否自动跳转
            </summary>
        </member>
        <member name="M:Sop.Spider.Download.WebDriverDownloaded.ImplDownloadAsync(Sop.Spider.Download.Request)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Download.WebDriverDownloaded.ReadContent(Sop.Spider.Download.Request,System.Byte[],System.String)">
            <summary>
            获取内容
            </summary>
            <param name="request"></param>
            <param name="contentBytes"></param>
            <param name="characterSet"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Download.WebDriverDownloaded.GetHttpClientEntry(System.String,System.Net.IWebProxy)">
            <summary>
            Return same <see cref="T:Sop.Spider.Download.WebDriverDownloaded.HttpClientEntry"/> instance when <paramref name="hash"/> is same.
            This can ensure some pages have same CookieContainer.
            </summary>
            <summary xml:lang="zh-CN">
            通过不同的Hash分组, 返回对应的HttpClient
            设计初衷: 某些网站会对COOKIE某部分做承上启下的检测, 因此必须保证: www.a.com/keyword=xxxx&amp;page=1 www.a.com/keyword=xxxx&amp;page=2 在同一个HttpClient里访问
            </summary>
            <param name="hash">分组的哈希 Hashcode to identify different group.</param>
            <param name="proxy">代理</param>
            <returns>HttpClientItem</returns>
        </member>
        <member name="T:Sop.Spider.Entity.DownloadStatistics">
            <summary>
            下载代理器的统计信息
            </summary>
        </member>
        <member name="P:Sop.Spider.Entity.DownloadStatistics.AgentId">
            <summary>
            下载代理器的标识
            </summary>
        </member>
        <member name="P:Sop.Spider.Entity.DownloadStatistics.Success">
            <summary>
            下载成功的次数
            </summary>
        </member>
        <member name="P:Sop.Spider.Entity.DownloadStatistics.Failed">
            <summary>
            下载失败的次数
            </summary>
        </member>
        <member name="P:Sop.Spider.Entity.DownloadStatistics.ElapsedMilliseconds">
            <summary>
            每次下载所需要的时间的总和
            </summary>
        </member>
        <member name="M:Sop.Spider.Entity.DownloadStatistics.AddElapsedMilliseconds(System.Int64)">
            <summary>
            添加下载所消耗的时间
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sop.Spider.Entity.DownloadStatistics.AddSuccess(System.Int32)">
            <summary>
            添加下载成功的次数
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Sop.Spider.Entity.DownloadStatistics.AddFailed(System.Int32)">
            <summary>
            添加下载失败的次数
            </summary>
            <param name="count"></param>
        </member>
        <member name="T:Sop.Spider.Entity.SpiderStatistics">
            <summary>
            爬虫的统计信息
            </summary>
        </member>
        <member name="P:Sop.Spider.Entity.SpiderStatistics.OwnerId">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Sop.Spider.Entity.SpiderStatistics.Start">
            <summary>
            爬虫启动时间
            </summary>
        </member>
        <member name="P:Sop.Spider.Entity.SpiderStatistics.Exit">
            <summary>
            爬虫结束时间
            </summary>
        </member>
        <member name="P:Sop.Spider.Entity.SpiderStatistics.Total">
            <summary>
            总的请求数
            </summary>
        </member>
        <member name="P:Sop.Spider.Entity.SpiderStatistics.Success">
            <summary>
            处理成功的请求数
            </summary>
        </member>
        <member name="P:Sop.Spider.Entity.SpiderStatistics.Failed">
            <summary>
            处理失败的请求数
            </summary>
        </member>
        <member name="M:Sop.Spider.Entity.SpiderStatistics.IncSuccess">
            <summary>
            添加成功次数 1
            </summary>
        </member>
        <member name="P:Sop.Spider.Entity.SpiderStatistics.LastModificationTime">
            <summary>
            上一次更新时间
            </summary>
        </member>
        <member name="M:Sop.Spider.Entity.SpiderStatistics.AddFailed(System.Int32)">
            <summary>
            添加指定的失败次数
            </summary>
            <param name="count">失败次数</param>
        </member>
        <member name="M:Sop.Spider.Entity.SpiderStatistics.AddTotal(System.Int32)">
            <summary>
            添加请求总数
            </summary>
            <param name="count"></param>
        </member>
        <member name="T:Sop.Spider.Browser">
            <summary>
            浏览器类型
            </summary>
        </member>
        <member name="F:Sop.Spider.Browser.Firefox">
            <summary>
            Firefox
            </summary>
        </member>
        <member name="F:Sop.Spider.Browser.Chrome">
            <summary>
            Chrome
            </summary>
        </member>
        <member name="F:Sop.Spider.Browser.Edge">
            <summary>
            Edge
            </summary>
        </member>
        <member name="T:Sop.Spider.CodeType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Sop.Spider.Compression">
             <summary>
            压缩类型
             </summary>
        </member>
        <member name="T:Sop.Spider.Database">
            <summary>
            Database type enum
            </summary>
            <summary xml:lang="zh-CN">
            数据库类型
            </summary>
        </member>
        <member name="F:Sop.Spider.Database.MySql">
            <summary>
            MySql
            </summary>
        </member>
        <member name="F:Sop.Spider.Database.SqlServer">
            <summary>
            SqlServer
            </summary>
        </member>
        <member name="F:Sop.Spider.Database.Mongo">
            <summary>
            MongoDB
            </summary>
        </member>
        <member name="F:Sop.Spider.Database.Cassandra">
            <summary>
            Cassandra
            </summary>
        </member>
        <member name="F:Sop.Spider.Database.PostgreSql">
            <summary>
            PostgreSql
            </summary>
        </member>
        <member name="F:Sop.Spider.Database.ClickHouse">
            <summary>
            ClickHouse
            </summary>
        </member>
        <member name="T:Sop.Spider.DownloadedType">
            <summary>
            下载器类型
            </summary>
        </member>
        <member name="F:Sop.Spider.DownloadedType.HttpClient">
            <summary>
            基于
            </summary>
        </member>
        <member name="T:Sop.Spider.DownloadFile">
            <summary>
            文件下载
            </summary>
        </member>
        <member name="F:Sop.Spider.DownloadFile.NotDownLoad">
            <summary>
            不下载
            </summary>
        </member>
        <member name="F:Sop.Spider.DownloadFile.SortDownLoad">
            <summary>
            分类下载
            </summary>
        </member>
        <member name="F:Sop.Spider.DownloadFile.CompressionDownLoad">
            <summary>
            压缩格式：RAR、ZIP
            </summary>
        </member>
        <member name="F:Sop.Spider.DownloadFile.VideoDownLoad">
            <summary>
            视频格式有：FLV、RMVB、MP4、MVB等
            </summary>
        </member>
        <member name="F:Sop.Spider.DownloadFile.SoundDownLoad">
            <summary>
            声音格式有：WMA、MP3等
            </summary>
        </member>
        <member name="F:Sop.Spider.DownloadFile.ImgAgeDownLoad">
            <summary>
            图片格式有：JPG、PNG、PDF、TIFF、SWF等
            </summary>
        </member>
        <member name="F:Sop.Spider.DownloadFile.DocumentDownLoad">
            <summary>
            文档格式有：TXT、DOC、XLS、PPT、DOCX、XLSX、PPTX 等
            </summary>
        </member>
        <member name="F:Sop.Spider.DownloadFile.RemoveWebResDownload">
            <summary>
            
            </summary>
        </member>
        <member name="T:Sop.Spider.DownloadPolicy">
            <summary>
            下载代理模式
            </summary>
        </member>
        <member name="F:Sop.Spider.DownloadPolicy.Random">
            <summary>
            随机
            </summary>
        </member>
        <member name="F:Sop.Spider.DownloadPolicy.Chained">
            <summary>
            链式
            </summary>
        </member>
        <member name="T:Sop.Spider.FileStorageType">
            <summary>
            浏览器类型
            </summary>
        </member>
        <member name="F:Sop.Spider.FileStorageType.LocalFilePath">
            <summary>
            本地路径（）
            </summary>
        </member>
        <member name="F:Sop.Spider.FileStorageType.LocalFileName">
            <summary>
            本地文件原名称（存在文件名称时替换）
            </summary>
        </member>
        <member name="F:Sop.Spider.FileStorageType.InternetPath">
            <summary>
            网络路径
            </summary>
        </member>
        <member name="T:Sop.Spider.RegexType">
            <summary>
            浏览器类型
            </summary>
        </member>
        <member name="F:Sop.Spider.RegexType.Customize">
            <summary>
            Customize
            </summary>
        </member>
        <member name="T:Sop.Spider.SelectorType">
            <summary>
            查询器类型
            </summary>
        </member>
        <member name="F:Sop.Spider.SelectorType.XPath">
            <summary>
            XPath
            </summary>
        </member>
        <member name="F:Sop.Spider.SelectorType.Regex">
            <summary>
            Regex
            </summary>
        </member>
        <member name="F:Sop.Spider.SelectorType.Css">
            <summary>
            Css
            </summary>
        </member>
        <member name="F:Sop.Spider.SelectorType.JsonPath">
            <summary>
            JsonPath
            详细参考：https://blog.csdn.net/fwk19840301/article/details/80452258
            </summary>
        </member>
        <member name="F:Sop.Spider.SelectorType.Enviroment">
            <summary>
            Enviroment
            </summary>
        </member>
        <member name="T:Sop.Spider.TrimType">
            <summary>
            Trim 类型
            </summary>
        </member>
        <member name="F:Sop.Spider.TrimType.Right">
            <summary>
            只Trim后边
            </summary>
        </member>
        <member name="F:Sop.Spider.TrimType.Left">
            <summary>
            只Trim前边
            </summary>
        </member>
        <member name="F:Sop.Spider.TrimType.All">
            <summary>
            去除所有空格、空白字符
            </summary>
        </member>
        <member name="F:Sop.Spider.TrimType.RightLeft">
            <summary>
            Trim前后
            </summary>
        </member>
        <member name="T:Sop.Spider.ValueOption">
            <summary>
            元素取值方式
            </summary>
        </member>
        <member name="F:Sop.Spider.ValueOption.None">
            <summary>
            For json content
            </summary>
        </member>
        <member name="F:Sop.Spider.ValueOption.OuterHtml">
             <summary>
            获取或设置HTML中的对象及其内容。
             </summary>
        </member>
        <member name="F:Sop.Spider.ValueOption.InnerHtml">
            <summary>
            HTML内容
            </summary>
        </member>
        <member name="F:Sop.Spider.ValueOption.InnerText">
            <summary>
            文字
            </summary>
        </member>
        <member name="F:Sop.Spider.ValueOption.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Sop.Spider.EventBus.EventReflection">
            <summary>Holder for reflection information generated from event.proto</summary>
        </member>
        <member name="P:Sop.Spider.EventBus.EventReflection.Descriptor">
            <summary>File descriptor for event.proto</summary>
        </member>
        <member name="T:Sop.Spider.EventBus.Event">
            <summary>
            命令消息
            </summary>
        </member>
        <member name="F:Sop.Spider.EventBus.Event.TypeFieldNumber">
            <summary>Field number for the "Type" field.</summary>
        </member>
        <member name="F:Sop.Spider.EventBus.Event.TimestampFieldNumber">
            <summary>Field number for the "Timestamp" field.</summary>
        </member>
        <member name="F:Sop.Spider.EventBus.Event.DataFieldNumber">
            <summary>Field number for the "Data" field.</summary>
        </member>
        <member name="T:Sop.Spider.EventBus.IEventBus">
            <summary>
            消息队列接口
            因为业务上所有定阅都不需要负载，因此不存在多个客户端订阅同一个 topic 的情况，不需要 Unsubscribe 的实现
            </summary>
        </member>
        <member name="M:Sop.Spider.EventBus.IEventBus.PublishAsync(System.String,Sop.Spider.EventBus.Event)">
            <summary>
            推送消息到指定 topic
            </summary>
            <param name="topic"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.EventBus.IEventBus.Publish(System.String,Sop.Spider.EventBus.Event)">
            <summary>
            推送消息到指定 topic
            </summary>
            <param name="topic"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.EventBus.IEventBus.Subscribe(System.String,System.Action{Sop.Spider.EventBus.Event})">
            <summary>
            订阅 topic
            </summary>
            <param name="topic"></param>
            <param name="action"></param>
        </member>
        <member name="M:Sop.Spider.EventBus.IEventBus.Unsubscribe(System.String)">
            <summary>
            取消订阅 topic
            </summary>
            <param name="topic"></param>
        </member>
        <member name="T:Sop.Spider.EventBus.LocalEventBus">
            <summary>
            本地事件注入
            1. 发布会把消息推送到所有订阅了对应 topic 的消费者
            2. 只能对 topic 做取消订阅，会导致所有订阅都取消。
            </summary>
        </member>
        <member name="M:Sop.Spider.EventBus.LocalEventBus.#ctor(Microsoft.Extensions.Logging.ILogger{Sop.Spider.EventBus.LocalEventBus})">
            <summary>
            构造方法
            </summary>
            <param name="logger">日志接口</param>
        </member>
        <member name="M:Sop.Spider.EventBus.LocalEventBus.PublishAsync(System.String,Sop.Spider.EventBus.Event)">
            <summary>
            推送消息到指定 topic
            </summary>
            <param name="topic">topic</param>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.EventBus.LocalEventBus.Subscribe(System.String,System.Action{Sop.Spider.EventBus.Event})">
            <summary>
            订阅 topic
            </summary>
            <param name="topic">topic</param>
            <param name="action">消息消费的方法</param>
        </member>
        <member name="M:Sop.Spider.EventBus.LocalEventBus.Unsubscribe(System.String)">
            <summary>
            取消订阅 topic
            </summary>
            <param name="topic">topic</param>
        </member>
        <member name="T:Sop.Spider.Check">
            <summary>
            参数合法性检查类
            </summary>
        </member>
        <member name="M:Sop.Spider.Check.NotNull``1(``0,System.String)">
            <summary>
            检查参数不能为空引用，否则抛出<see cref="T:System.ArgumentNullException"/>异常。
            </summary>
            <param name="value"></param>
            <param name="paramName">参数名称</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sop.Spider.Check.Require``1(System.Boolean,System.String)">
            <summary>
            验证指定值的断言<paramref name="assertion"/>是否为真，如果不为真，抛出指定消息<paramref name="message"/>的指定类型<typeparamref name="TException"/>异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="assertion">要验证的断言。</param>
            <param name="message">异常消息。</param>
        </member>
        <member name="T:Sop.Spider.CryptographyExtensions">
            <summary>
            加、解密帮助类
            </summary>
        </member>
        <member name="M:Sop.Spider.CryptographyExtensions.ToMd5(System.String)">
            <summary>
            计算32位MD5
            </summary>
            <param name="str">需要计算的字符串</param>
            <returns>32位的MD5值</returns>
        </member>
        <member name="M:Sop.Spider.CryptographyExtensions.ToShortMd5(System.String)">
            <summary>
            计算8位MD5
            </summary>
            <param name="str">需要计算的字符串</param>
            <returns>8位的MD5值</returns>
        </member>
        <member name="M:Sop.Spider.CryptographyExtensions.ToDes(System.String,System.String)">
            <summary>
            DES加密
            </summary>
            <param name="key">秘钥</param>
            <param name="str">需要加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="T:Sop.Spider.ExcelExtensions">
            <summary>
            Excel扩展
            </summary>
        </member>
        <member name="M:Sop.Spider.ExcelExtensions.Export(System.Data.IDbConnection,System.String,System.String,System.Boolean)">
            <summary>
            导出数据库数据到EXCEL
            </summary>
            <param name="conn">数据库连接</param>
            <param name="sql">SQL语句</param>
            <param name="fileName">文件名</param>
            <param name="rewrite">是否覆盖旧文件</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.ExcelExtensions.EmailTo(System.Data.IDbConnection,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            把数据库数据导出到EXCEL并发送邮件
            </summary>
            <param name="conn">数据库连接</param>
            <param name="sql">SQL语句</param>
            <param name="fileName">文件名</param>
            <param name="subject">邮件的标题</param>
            <param name="emailTo">邮件接收人</param>
            <param name="emailHost">邮件发送服务地址</param>
            <param name="port">邮件发送服务端口</param>
            <param name="account">邮件发送服务的用户名</param>
            <param name="password">邮件发送服务的密码</param>
            <param name="displayName">邮件发送服务的显示名称</param>
        </member>
        <member name="M:Sop.Spider.ExcelExtensions.EmailTo(System.Data.IDbConnection,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            把数据库数据导出到EXCEL并发送邮件
            </summary>
            <param name="conn">数据库连接</param>
            <param name="sql">SQL语句</param>
            <param name="fileName">文件名</param>
            <param name="subject">邮件的标题</param>
            <param name="emailTo">邮件接收人</param>
            <param name="emailHost">邮件发送服务地址</param>
            <param name="port">邮件发送服务端口</param>
            <param name="account">邮件发送服务的用户名</param>
            <param name="password">邮件发送服务的密码</param>
            <param name="displayName">邮件发送服务的显示名称</param>
        </member>
        <member name="M:Sop.Spider.ExcelExtensions.EmailTo(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            文件附件发送邮件
            </summary>
            <param name="file">附件的路径</param>
            <param name="subject">邮件的标题</param>
            <param name="emailTo">邮件接收人</param>
            <param name="emailHost">邮件发送服务地址</param>
            <param name="port">邮件发送服务端口</param>
            <param name="account">邮件发送服务的用户名</param>
            <param name="password">邮件发送服务的密码</param>
            <param name="displayName">邮件发送服务的显示名称</param>
        </member>
        <member name="T:Sop.Spider.Network.InternetDetector.DefaultInternetDetector">
            <summary>
            标准网络状态检测器, 通过PING某个网站是否能通
            </summary>
        </member>
        <member name="M:Sop.Spider.Network.InternetDetector.DefaultInternetDetector.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Sop.Spider.Network.InternetDetector.DefaultInternetDetector.DoValidate">
            <summary>
            检测网络状态
            </summary>
            <returns>如果返回 True, 表示当前可以访问互联网</returns>
        </member>
        <member name="T:Sop.Spider.Network.InternetDetector.IInternetDetector">
            <summary>
            网络状态检测器
            </summary>
        </member>
        <member name="P:Sop.Spider.Network.InternetDetector.IInternetDetector.Timeout">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="M:Sop.Spider.Network.InternetDetector.IInternetDetector.Detect">
            <summary>
            检测网络状态
            </summary>
            <returns>如果返回 True, 表示当前可以访问互联网</returns>
        </member>
        <member name="T:Sop.Spider.Network.InternetDetector.InternetDetectorBase">
            <summary>
            网络状态检测器
            </summary>
        </member>
        <member name="M:Sop.Spider.Network.InternetDetector.InternetDetectorBase.DoValidate">
            <summary>
            检测网络状态
            </summary>
            <returns>如果返回 True, 表示当前可以访问互联网</returns>
        </member>
        <member name="P:Sop.Spider.Network.InternetDetector.InternetDetectorBase.Timeout">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="M:Sop.Spider.Network.InternetDetector.InternetDetectorBase.Detect">
            <summary>
            检测网络状态
            </summary>
            <returns>如果返回 True, 表示当前可以访问互联网</returns>
        </member>
        <member name="T:Sop.Spider.RequestSupplier.IRequestSupplier">
            <summary>
            请求供应接口
            </summary>
        </member>
        <member name="M:Sop.Spider.RequestSupplier.IRequestSupplier.Execute(System.Action{Sop.Spider.Download.Request})">
            <summary>
            运行请求供应
            </summary>
            <param name="enqueueDelegate">请求入队的方法</param>
        </member>
        <member name="T:Sop.Spider.RequestSupplier.RelationalDatabaseRequestSupplier">
            <summary>
            基于关系型数据库的请求入队
            </summary>
        </member>
        <member name="F:Sop.Spider.RequestSupplier.RelationalDatabaseRequestSupplier._formats">
            <summary>
            拼接Url的方式, 会把Columns对应列的数据传入
            https://s.taobao.com/search?q={0},s=0;
            </summary>
        </member>
        <member name="M:Sop.Spider.RequestSupplier.RelationalDatabaseRequestSupplier.#ctor(Sop.Spider.Database,System.String,System.String,System.String[],System.String[])">
            <summary>
            构造方法
            </summary>
            <param name="database">数据库类型</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="sql">SQL 语句</param>
            <param name="formatArguments">起始链接格式化参数</param>
            <param name="formats">起始链接格式化模版</param>
        </member>
        <member name="M:Sop.Spider.RequestSupplier.RelationalDatabaseRequestSupplier.FormatDataObject(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            从数据库中查询出的结果可以先做一下格式
            </summary>
            <param name="item">数据对象</param>
        </member>
        <member name="M:Sop.Spider.RequestSupplier.RelationalDatabaseRequestSupplier.FormatRequest(Sop.Spider.Download.Request)">
            <summary>
            格式化最终的请求信息
            </summary>
            <param name="request">请求信息</param>
        </member>
        <member name="M:Sop.Spider.RequestSupplier.RelationalDatabaseRequestSupplier.Execute(System.Action{Sop.Spider.Download.Request})">
            <summary>
            运行请求供应
            </summary>
            <param name="enqueueDelegate">请求入队的方法</param>
        </member>
        <member name="T:Sop.Spider.Scheduler.Component.BloomFilterDuplicateRemover">
            <summary>
            BloomFilterDuplicateRemover for huge number of urls.
            </summary>
        </member>
        <member name="P:Sop.Spider.Scheduler.Component.BloomFilterDuplicateRemover.Total">
            <summary>
            Get TotalRequestsCount.
            </summary>
            <returns>TotalRequestsCount</returns>
        </member>
        <member name="M:Sop.Spider.Scheduler.Component.BloomFilterDuplicateRemover.#ctor(System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="expectedNumberOfElements">元素个数</param>
        </member>
        <member name="M:Sop.Spider.Scheduler.Component.BloomFilterDuplicateRemover.#ctor(System.Double,System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="falsePositiveProbability">误判机率</param>
            <param name="expectedInsertions">元素个数</param>
        </member>
        <member name="M:Sop.Spider.Scheduler.Component.BloomFilterDuplicateRemover.IsDuplicate(Sop.Spider.Download.Request)">
            <summary>
            Check whether the request is duplicate.
            </summary>
            <param name="request">Request</param>
            <returns>Whether the request is duplicate.</returns>
        </member>
        <member name="M:Sop.Spider.Scheduler.Component.BloomFilterDuplicateRemover.ResetDuplicateCheck">
            <summary>
            Reset duplicate check.
            </summary>
        </member>
        <member name="M:Sop.Spider.Scheduler.Component.BloomFilterDuplicateRemover.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Sop.Spider.Scheduler.Component.HashSetDuplicateRemover">
            <summary>
            通过哈希去重
            </summary>
        </member>
        <member name="M:Sop.Spider.Scheduler.Component.HashSetDuplicateRemover.IsDuplicate(Sop.Spider.Download.Request)">
            <summary>
            Check whether the request is duplicate.
            </summary>
            <param name="request">Request</param>
            <returns>Whether the request is duplicate.</returns>
        </member>
        <member name="M:Sop.Spider.Scheduler.Component.HashSetDuplicateRemover.ResetDuplicateCheck">
            <summary>
            重置去重器
            </summary>
        </member>
        <member name="M:Sop.Spider.Scheduler.Component.HashSetDuplicateRemover.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Sop.Spider.Scheduler.Component.IDuplicateRemover.IsDuplicate(Sop.Spider.Download.Request)">
            <summary>
            Check whether the request is duplicate.
            </summary>
            <param name="request">Request</param>
            <returns>Whether the request is duplicate.</returns>
        </member>
        <member name="M:Sop.Spider.Scheduler.Component.IDuplicateRemover.ResetDuplicateCheck">
            <summary>
            Reset duplicate check.
            </summary>
        </member>
        <member name="M:Sop.Spider.Scheduler.DuplicateRemovedScheduler.ResetDuplicateCheck">
            <summary>
            重置去重器
            </summary>
        </member>
        <member name="M:Sop.Spider.Scheduler.DuplicateRemovedScheduler.PushWhenNoDuplicate(Sop.Spider.Download.Request)">
            <summary>
            如果请求未重复就添加到队列中
            </summary>
            <param name="request">请求</param>
        </member>
        <member name="M:Sop.Spider.Scheduler.DuplicateRemovedScheduler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Sop.Spider.Scheduler.DuplicateRemovedScheduler.DuplicateRemover">
            <summary>
            去重器
            </summary>
        </member>
        <member name="P:Sop.Spider.Scheduler.DuplicateRemovedScheduler.Total">
            <summary>
            队列中的总请求个数
            </summary>
        </member>
        <member name="M:Sop.Spider.Scheduler.DuplicateRemovedScheduler.Dequeue(System.String,System.Int32)">
            <summary>
            从队列中取出指定爬虫的指定个数请求
            </summary>
            <param name="ownerId">爬虫标识</param>
            <param name="count">出队数</param>
            <returns>请求</returns>
        </member>
        <member name="M:Sop.Spider.Scheduler.DuplicateRemovedScheduler.Enqueue(System.Collections.Generic.IEnumerable{Sop.Spider.Download.Request})">
            <summary>
            请求入队
            </summary>
            <param name="requests">请求</param>
            <returns>入队个数</returns>
        </member>
        <member name="T:Sop.Spider.Scheduler.IScheduler">
            <summary>
            调度器接口
            </summary>
        </member>
        <member name="M:Sop.Spider.Scheduler.IScheduler.Dequeue(System.String,System.Int32)">
            <summary>
            从队列中取出指定爬虫的指定个数请求
            </summary>
            <param name="ownerId">爬虫标识</param>
            <param name="count">出队数</param>
            <returns>请求</returns>
        </member>
        <member name="M:Sop.Spider.Scheduler.IScheduler.Enqueue(System.Collections.Generic.IEnumerable{Sop.Spider.Download.Request})">
            <summary>
            请求入队
            </summary>
            <param name="requests">请求</param>
            <returns>入队个数</returns>
        </member>
        <member name="P:Sop.Spider.Scheduler.IScheduler.Total">
            <summary>
            队列中的总请求个数
            </summary>
        </member>
        <member name="T:Sop.Spider.Scheduler.QueueBfsScheduler">
            <summary>
            基于内存的广度优先调度(不去重 URL)
            </summary>
        </member>
        <member name="M:Sop.Spider.Scheduler.QueueBfsScheduler.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Sop.Spider.Scheduler.QueueBfsScheduler.ResetDuplicateCheck">
            <summary>
            重置去重器
            </summary>
        </member>
        <member name="M:Sop.Spider.Scheduler.QueueBfsScheduler.PushWhenNoDuplicate(Sop.Spider.Download.Request)">
            <summary>
            如果请求未重复就添加到队列中
            </summary>
            <param name="request">请求</param>
        </member>
        <member name="M:Sop.Spider.Scheduler.QueueBfsScheduler.Dequeue(System.String,System.Int32)">
            <summary>
            从队列中取出指定爬虫的指定个数请求
            </summary>
            <param name="ownerId">爬虫标识</param>
            <param name="count">出队数</param>
            <returns>请求</returns>
        </member>
        <member name="T:Sop.Spider.Scheduler.QueueDfsScheduler">
            <summary>
            基于内存的深度优先调度(不去重 URL)
            </summary>
        </member>
        <member name="M:Sop.Spider.Scheduler.QueueDfsScheduler.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Sop.Spider.Scheduler.QueueDfsScheduler.ResetDuplicateCheck">
            <summary>
            重置去重器
            </summary>
        </member>
        <member name="M:Sop.Spider.Scheduler.QueueDfsScheduler.PushWhenNoDuplicate(Sop.Spider.Download.Request)">
            <summary>
            如果请求未重复就添加到队列中
            </summary>
            <param name="request">请求</param>
        </member>
        <member name="M:Sop.Spider.Scheduler.QueueDfsScheduler.Dequeue(System.String,System.Int32)">
            <summary>
            从队列中取出指定爬虫的指定个数请求
            </summary>
            <param name="ownerId">爬虫标识</param>
            <param name="count">出队数</param>
            <returns>请求</returns>
        </member>
        <member name="T:Sop.Spider.Scheduler.QueueDistinctBfsScheduler">
            <summary>
            广度优先调度 基于内存(去重 URL)
            </summary>
        </member>
        <member name="M:Sop.Spider.Scheduler.QueueDistinctBfsScheduler.ResetDuplicateCheck">
            <summary>
            重置去重器
            </summary>
        </member>
        <member name="M:Sop.Spider.Scheduler.QueueDistinctBfsScheduler.PushWhenNoDuplicate(Sop.Spider.Download.Request)">
            <summary>
            如果请求未重复就添加到队列中
            </summary>
            <param name="request">请求</param>
        </member>
        <member name="M:Sop.Spider.Scheduler.QueueDistinctBfsScheduler.Dequeue(System.String,System.Int32)">
            <summary>
            从队列中取出指定爬虫的指定个数请求
            </summary>
            <param name="ownerId">爬虫标识</param>
            <param name="count">出队数</param>
            <returns>请求</returns>
        </member>
        <member name="T:Sop.Spider.Scheduler.QueueDistinctDfsScheduler">
            <summary>
            基于内存的深度优先调度(去重 URL)
            </summary>
        </member>
        <member name="M:Sop.Spider.Scheduler.QueueDistinctDfsScheduler.ResetDuplicateCheck">
            <summary>
            重置去重器
            </summary>
        </member>
        <member name="M:Sop.Spider.Scheduler.QueueDistinctDfsScheduler.PushWhenNoDuplicate(Sop.Spider.Download.Request)">
            <summary>
            如果请求未重复就添加到队列中
            </summary>
            <param name="request">请求</param>
        </member>
        <member name="M:Sop.Spider.Scheduler.QueueDistinctDfsScheduler.Dequeue(System.String,System.Int32)">
            <summary>
            从队列中取出指定爬虫的指定个数请求
            </summary>
            <param name="ownerId">爬虫标识</param>
            <param name="count">出队数</param>
            <returns>请求</returns>
        </member>
        <member name="T:Sop.Spider.Scheduler.TraverseStrategy">
            <summary>
            调度的遍历策略
            </summary>
        </member>
        <member name="F:Sop.Spider.Scheduler.TraverseStrategy.Dfs">
            <summary>
            深度优先
            </summary>
        </member>
        <member name="F:Sop.Spider.Scheduler.TraverseStrategy.Bfs">
            <summary>
            广度优先
            </summary>
        </member>
        <member name="T:Sop.Spider.ServiceCollectionExtensions">
            <summary>
            注入事件扩展
            </summary>
        </member>
        <member name="M:Sop.Spider.ServiceCollectionExtensions.ConfigureAppConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.ServiceCollectionExtensions.AddLocalDownloadCenter(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入本地下载事件
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.ServiceCollectionExtensions.UseLocalDownloadAgentStore(Sop.Spider.DownloadAgentRegisterCenter.DownloadAgentRegisterCenterBuilder)">
            <summary>
            使用注入本地事件下载代理存储
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.ServiceCollectionExtensions.AddLocalEventBus(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            事件注入（本地事件注入）
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.ServiceCollectionExtensions.AddDownloadAgent(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Sop.Spider.DownloadAgent.DownloadAgentBuilder})">
            <summary>
            注入事件下载代理器
            </summary>
            <param name="services">注入服务</param>
            <param name="configure">相关配置委托事件</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.ServiceCollectionExtensions.UseFileLocker(Sop.Spider.DownloadAgent.DownloadAgentBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.ServiceCollectionExtensions.UseDefaultInternetDetector(Sop.Spider.DownloadAgent.DownloadAgentBuilder)">
            <summary>
            检查网络
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.ServiceCollectionExtensions.AddStatisticsCenter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Sop.Spider.Statistics.StatisticsBuilder})">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.ServiceCollectionExtensions.UseMemory(Sop.Spider.Statistics.StatisticsBuilder)">
            <summary>
            使用内存类
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.ServiceCollectionExtensions.UseMySql(Sop.Spider.Statistics.StatisticsBuilder)">
            <summary>
            使用mysql
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.ServiceCollectionExtensions.UseRedis(Sop.Spider.Statistics.StatisticsBuilder)">
            <summary>
            使用Redis
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.Spider">
            <summary>
            爬虫基类
            </summary>
            <summary>
            Spider 实体属性类
            </summary>
        </member>
        <member name="M:Sop.Spider.Spider.#ctor(Sop.Spider.EventBus.IEventBus,Sop.Spider.Statistics.IStatisticsService,Sop.Spider.Common.SpiderOptions,Microsoft.Extensions.Logging.ILogger{Sop.Spider.Spider},System.IServiceProvider)">
            <summary>
            爬虫基类
            </summary>
            <param name="eventBus"></param>
            <param name="options"></param>
            <param name="logger"></param>
            <param name="services">服务提供接口</param>
            <param name="statisticsService"></param>
        </member>
        <member name="M:Sop.Spider.Spider.OnExiting">
            <summary>
            结束前的处理工作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Spider.AddConfigureRequestDelegate(System.Action{Sop.Spider.Download.Request})">
            <summary>
            添加请求的配置方法
            可以计算 Cookie, Sign 等操作
            </summary>
            <param name="configureDelegate">配置方法</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Spider.AddDataFlow(Sop.Spider.DataStorage.IDataFlow)">
            <summary>
            添加数据流处理器
            </summary>
            <param name="dataFlow">数据流处理器</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Spider.AddRequestSupply(Sop.Spider.RequestSupplier.IRequestSupplier)">
            <summary>
            添加请求供应器
            </summary>
            <param name="supply">请求供应器</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Spider.AddRequests(Sop.Spider.Download.Request[])">
            <summary>
            添加请求
            </summary>
            <param name="requests">请求</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Spider.AddRequests(System.String[])">
            <summary>
            添加链接
            </summary>
            <param name="urls">链接</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Spider.RunAsync(System.String[])">
            <summary>
            启动爬虫
            </summary>
            <param name="args">启动参数</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Spider.Pause">
            <summary>
            暂停爬虫
            </summary>
        </member>
        <member name="M:Sop.Spider.Spider.Continue">
            <summary>
            继续爬虫
            </summary>
        </member>
        <member name="M:Sop.Spider.Spider.Exit">
            <summary>
            退出爬虫
            </summary>
        </member>
        <member name="M:Sop.Spider.Spider.ExitBySignal">
            <summary>
            发送退出信号
            </summary>
        </member>
        <member name="M:Sop.Spider.Spider.WaitForExit(System.Int64)">
            <summary>
            等待任务结束
            </summary>
        </member>
        <member name="M:Sop.Spider.Spider.Initialize">
            <summary>
            初始化配置
            </summary>
        </member>
        <member name="M:Sop.Spider.Spider.GetDefaultStorage">
            <summary>
            从配置文件中获取数据存储器
            </summary>
            <returns></returns>
            <exception cref="T:Sop.Spider.SpiderException"></exception>
        </member>
        <member name="M:Sop.Spider.Spider.ResetMmfSignal">
            <summary>
            内存映射文件
            </summary>
        </member>
        <member name="M:Sop.Spider.Spider.StartSpeedControllerAsync">
            <summary>
            爬虫速度控制器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Spider.HandleCommandAsync(Sop.Spider.EventBus.Event)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Spider.HandleMessageAsync(Sop.Spider.EventBus.Event)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Spider.GetDepth">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Spider.WaitForExiting">
            <summary>
            阻塞等待直到爬虫结束
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Spider.CheckIfRunning">
            <summary>
            判断爬虫是否正在运行
            </summary>
        </member>
        <member name="M:Sop.Spider.Spider.EnqueueRequestToScheduler">
            <summary>
            把当前缓存的所有 Request 入队
            </summary>
        </member>
        <member name="F:Sop.Spider.Spider._speedControllerInterval">
            <summary>
            速度控制器间隔
            </summary>
        </member>
        <member name="P:Sop.Spider.Spider.NewTaskId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Sop.Spider.Spider.Depth">
            <summary>
            遍历深度
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Sop.Spider.Spider.MmfSignal">
            <summary>
            是否支持通过 MMF 操作爬虫
            </summary>
        </member>
        <member name="P:Sop.Spider.Spider.RetryWhenResultIsEmpty">
            <summary>
            如果结析结果为空, 重试。默认值为 否。
            </summary>
        </member>
        <member name="P:Sop.Spider.Spider.Status">
            <summary>
            爬虫运行状态
            </summary>
        </member>
        <member name="P:Sop.Spider.Spider.Scheduler">
            <summary>
            调度器
            </summary>
            <exception cref="T:Sop.Spider.SpiderException"></exception>
        </member>
        <member name="P:Sop.Spider.Spider.Speed">
            <summary>
            每秒尝试下载多少个请求
            </summary>
        </member>
        <member name="P:Sop.Spider.Spider.EnqueueBatchCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Sop.Spider.Spider.StatisticsInterval">
            <summary>
            上报状态的间隔时间，单位: 秒
            </summary>
            <exception cref="T:Sop.Spider.SpiderException"></exception>
        </member>
        <member name="P:Sop.Spider.Spider.Id">
            <summary>
            任务的唯一标识
            </summary>
        </member>
        <member name="P:Sop.Spider.Spider.Name">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="P:Sop.Spider.Spider.EmptySleepTime">
            <summary>
            等待一定时间，如果队列中没有新的请求则认为任务结束
            </summary>
            <exception cref="T:Sop.Spider.SpiderException"></exception>
        </member>
        <member name="P:Sop.Spider.Spider.NonRespondedLimitation">
            <summary>
            当多少个下载请求未得到回应时，暂停任务
            TODO: 设置范围限制，不能小于 50
            </summary>
        </member>
        <member name="P:Sop.Spider.Spider.NonRespondedTimeLimitation">
            <summary>
            当一直得不到下载请求一段时间后，任务退出
            单位: 秒
            TODO: 设置配置限制，不能小于 30
            </summary>
        </member>
        <member name="P:Sop.Spider.Spider.RespondedTimeout">
            <summary>
            多久没有收到回复认为是超时，尝试重试下载
            单位秒
            </summary>
        </member>
        <member name="P:Sop.Spider.Spider.RespondedTimeoutRetryTimes">
            <summary>
            回应超时的重试次数，如果任一请求的重试次数超过则退出任务
            TODO: 设置配置限制，不能小于 20
            </summary>
        </member>
        <member name="T:Sop.Spider.SpiderFormatException">
            <summary>
            SpiderFormatException异常
            </summary>
        </member>
        <member name="T:Sop.Spider.SpiderArgumentException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Sop.Spider.SpiderException">
            <summary>
            表示应用程序执行期间发生的错误。
            </summary>
        </member>
        <member name="T:Sop.Spider.SpiderNotSupportedException">
            <summary>
            不支持调用的方法时，或者尝试读取，搜索或写入不支持调用的功能的流时引发的异常
            </summary>
        </member>
        <member name="T:Sop.Spider.SpiderHostBuilder">
            <summary>
            主要服务器
            </summary>
        </member>
        <member name="M:Sop.Spider.SpiderHostBuilder.ConfigureLogging(System.Action{Microsoft.Extensions.Logging.ILoggingBuilder})">
            <summary>
            
            </summary>
            <param name="configureLogging"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.SpiderHostBuilder.ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            
            </summary>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.SpiderHostBuilder.Register``1">
            <summary>
            
            </summary>
            <typeparam name="TSpider"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.SpiderHostBuilder.CreateServiceProvider">
            <summary>
            注入服务（配置、统计、爬虫、爬虫选项、日志）
            </summary>
        </member>
        <member name="T:Sop.Spider.SpiderProvider">
            <summary>
            爬虫类型
            </summary>
        </member>
        <member name="M:Sop.Spider.SpiderProvider.Start">
             <summary>
            启动
             </summary>
        </member>
        <member name="T:Sop.Spider.Startup">
            <summary>
            启动任务工具
            </summary>
        </member>
        <member name="P:Sop.Spider.Startup.DetectAssembles">
            <summary>
            DLL 名字中包含任意一个即是需要扫描的 DLL
            </summary>
        </member>
        <member name="M:Sop.Spider.Startup.Execute(System.String[])">
            <summary>
            运行
            </summary>
            <param name="args">运行参数</param>
        </member>
        <member name="M:Sop.Spider.Startup.DetectSpiders">
            <summary>
            检测爬虫类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Startup.DetectAssemblies">
            <summary>
            扫描所有需要求的DLL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Startup.PrintEnvironment">
            <summary>
            打印系统环境
            </summary>
        </member>
        <member name="T:Sop.Spider.Statistics.IStatisticsCenter">
            <summary>
            统计服务中心
            </summary>
        </member>
        <member name="T:Sop.Spider.Statistics.IStatisticsService">
            <summary>
            统计服务接口
            </summary>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsService.IncrementSuccessAsync(System.String)">
            <summary>
            增加成功次数 1
            </summary>
            <param name="ownerId">爬虫标识</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsService.IncrementFailedAsync(System.String,System.Int32)">
            <summary>
            添加指定失败次数
            </summary>
            <param name="ownerId">爬虫标识</param>
            <param name="count">失败次数</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsService.IncrementTotalAsync(System.String,System.Int32)">
            <summary>
            添加总请求数
            </summary>
            <param name="ownerId">爬虫标识</param>
            <param name="count">请求数</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsService.StartAsync(System.String)">
            <summary>
            设置爬虫启动时间
            </summary>
            <param name="ownerId">爬虫标识</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsService.ExitAsync(System.String)">
            <summary>
            设置爬虫退出时间
            </summary>
            <param name="ownerId">爬虫标识</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsService.IncrementDownloadSuccessAsync(System.String,System.Int32,System.Int64)">
            <summary>
            添加指定下载代理器的下载成功次数
            </summary>
            <param name="agentId">下载代理器标识</param>
            <param name="count">下载成功次数</param>
            <param name="elapsedMilliseconds">下载总消耗的时间</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsService.IncrementDownloadFailedAsync(System.String,System.Int32,System.Int64)">
            <summary>
            添加指定下载代理器的下载失败次数
            </summary>
            <param name="agentId">下载代理器标识</param>
            <param name="count">下载失败次数</param>
            <param name="elapsedMilliseconds">下载总消耗的时间</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsService.PrintStatisticsAsync(System.String)">
            <summary>
            打印统计信息(仅限本地爬虫使用)
            </summary>
            <param name="ownerId">爬虫标识</param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.Statistics.IStatisticsStore">
            <summary>
            统计存储接口
            </summary>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsStore.EnsureDatabaseAndTableCreatedAsync">
            <summary>
            创建数据库和表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsStore.IncrementSuccessAsync(System.String)">
            <summary>
            增加成功次数 1
            </summary>
            <param name="ownerId">爬虫标识</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsStore.IncrementFailedAsync(System.String,System.Int32)">
            <summary>
            添加指定失败次数
            </summary>
            <param name="ownerId">爬虫标识</param>
            <param name="count">失败次数</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsStore.StartAsync(System.String)">
            <summary>
            设置爬虫启动时间
            </summary>
            <param name="ownerId">爬虫标识</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsStore.ExitAsync(System.String)">
            <summary>
            设置爬虫退出时间
            </summary>
            <param name="ownerId">爬虫标识</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsStore.IncrementDownloadSuccessAsync(System.String,System.Int32,System.Int64)">
            <summary>
            添加指定下载代理器的下载成功次数
            </summary>
            <param name="agentId">下载代理器标识</param>
            <param name="count">下载成功次数</param>
            <param name="elapsedMilliseconds">下载总消耗的时间</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsStore.IncrementDownloadFailedAsync(System.String,System.Int32,System.Int64)">
            <summary>
            添加指定下载代理器的下载失败次数
            </summary>
            <param name="agentId">下载代理器标识</param>
            <param name="count">下载失败次数</param>
            <param name="elapsedMilliseconds">下载总消耗的时间</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsStore.GetDownloadStatisticsListAsync(System.Int32,System.Int32)">
            <summary>
            分页查询下载代理器的统计信息
            </summary>
            <param name="page"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsStore.GetDownloadStatisticsAsync(System.String)">
            <summary>
            查询指定下载代理器的统计信息
            </summary>
            <param name="agentId">下载代理器标识</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsStore.GetSpiderStatisticsAsync(System.String)">
            <summary>
            查询指定爬虫的统计信息
            </summary>
            <param name="ownerId">爬虫标识</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsStore.GetSpiderStatisticsListAsync(System.Int32,System.Int32)">
            <summary>
            分页查询爬虫的统计信息
            </summary>
            <param name="page"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.IStatisticsStore.IncrementTotalAsync(System.String,System.Int32)">
            <summary>
            添加总请求数
            </summary>
            <param name="ownerId">爬虫标识</param>
            <param name="count">请求数</param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.Statistics.MemoryStatisticsStore">
            <summary>
            基于内存的统计存储
            </summary>
        </member>
        <member name="M:Sop.Spider.Statistics.MemoryStatisticsStore.IncrementTotalAsync(System.String,System.Int32)">
            <summary>
            添加总请求数
            </summary>
            <param name="ownerId">爬虫标识</param>
            <param name="count">请求数</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MemoryStatisticsStore.EnsureDatabaseAndTableCreatedAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MemoryStatisticsStore.IncrementSuccessAsync(System.String)">
            <summary>
            增加成功次数 1
            </summary>
            <param name="ownerId">爬虫标识</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MemoryStatisticsStore.IncrementFailedAsync(System.String,System.Int32)">
            <summary>
            添加指定失败次数
            </summary>
            <param name="ownerId">爬虫标识</param>
            <param name="count">失败次数</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MemoryStatisticsStore.StartAsync(System.String)">
            <summary>
            设置爬虫启动时间
            </summary>
            <param name="ownerId">爬虫标识</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MemoryStatisticsStore.ExitAsync(System.String)">
            <summary>
            设置爬虫退出时间
            </summary>
            <param name="ownerId">爬虫标识</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MemoryStatisticsStore.IncrementDownloadSuccessAsync(System.String,System.Int32,System.Int64)">
            <summary>
            添加指定下载代理器的下载成功次数
            </summary>
            <param name="agentId">下载代理器标识</param>
            <param name="count">下载成功次数</param>
            <param name="elapsedMilliseconds">下载总消耗的时间</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MemoryStatisticsStore.IncrementDownloadFailedAsync(System.String,System.Int32,System.Int64)">
            <summary>
            添加指定下载代理器的下载失败次数
            </summary>
            <param name="agentId">下载代理器标识</param>
            <param name="count">下载失败次数</param>
            <param name="elapsedMilliseconds">下载总消耗的时间</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MemoryStatisticsStore.GetDownloadStatisticsListAsync(System.Int32,System.Int32)">
            <summary>
            分页查询下载代理器的统计信息
            </summary>
            <param name="page"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MemoryStatisticsStore.GetDownloadStatisticsAsync(System.String)">
            <summary>
            查询指定下载代理器的统计信息
            </summary>
            <param name="agentId">下载代理器标识</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MemoryStatisticsStore.GetSpiderStatisticsAsync(System.String)">
            <summary>
            查询指定爬虫的统计信息
            </summary>
            <param name="ownerId">爬虫标识</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MemoryStatisticsStore.GetSpiderStatisticsListAsync(System.Int32,System.Int32)">
            <summary>
            分页查询爬虫的统计信息
            </summary>
            <param name="page"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.Statistics.MySqlStatisticsStore">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sop.Spider.Statistics.MySqlStatisticsStore.#ctor(Sop.Spider.Common.SpiderOptions)">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Sop.Spider.Statistics.MySqlStatisticsStore.EnsureDatabaseAndTableCreatedAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MySqlStatisticsStore.IncrementTotalAsync(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="ownerId"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MySqlStatisticsStore.IncrementSuccessAsync(System.String)">
            <summary>
            
            </summary>
            <param name="ownerId"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MySqlStatisticsStore.IncrementFailedAsync(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="ownerId"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MySqlStatisticsStore.StartAsync(System.String)">
            <summary>
            
            </summary>
            <param name="ownerId"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MySqlStatisticsStore.ExitAsync(System.String)">
            <summary>
            
            </summary>
            <param name="ownerId"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MySqlStatisticsStore.IncrementDownloadSuccessAsync(System.String,System.Int32,System.Int64)">
            <summary>
            
            </summary>
            <param name="agentId"></param>
            <param name="count"></param>
            <param name="elapsedMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MySqlStatisticsStore.IncrementDownloadFailedAsync(System.String,System.Int32,System.Int64)">
            <summary>
            
            </summary>
            <param name="agentId"></param>
            <param name="count"></param>
            <param name="elapsedMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MySqlStatisticsStore.GetDownloadStatisticsListAsync(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="page"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MySqlStatisticsStore.GetDownloadStatisticsAsync(System.String)">
            <summary>
            
            </summary>
            <param name="agentId"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MySqlStatisticsStore.GetSpiderStatisticsAsync(System.String)">
            <summary>
            
            </summary>
            <param name="ownerId"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.MySqlStatisticsStore.GetSpiderStatisticsListAsync(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="page"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.Statistics.RedisStatisticsStore">
            <summary>
            TODO： 没有充分测试 
            </summary>
        </member>
        <member name="M:Sop.Spider.Statistics.RedisStatisticsStore.#ctor(Sop.Spider.Common.SpiderOptions)">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Sop.Spider.Statistics.RedisStatisticsStore.EnsureDatabaseAndTableCreatedAsync">
            <summary>
            创建库 （redis 不用创建，保证链接就OK）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.RedisStatisticsStore.SetRedisQueue(System.String,System.String,System.String,System.Int64)">
            <summary>
            增量缓存计数
            </summary>
            <param name="countType">计数类型</param>
            <param name="tenantType">租户类型</param>
            <param name="tenantId">租户ID</param>
            <param name="value">增量数</param>
            <returns>增量后数，如果增量数为0时，返回查询的增量数</returns>
        </member>
        <member name="M:Sop.Spider.Statistics.RedisStatisticsStore.IncrementTotalAsync(System.String,System.Int32)">
            <summary>
            计数总数
            </summary>
            <param name="ownerId"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.RedisStatisticsStore.IncrementSuccessAsync(System.String)">
            <summary>
            成功计数
            </summary>
            <param name="ownerId"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.RedisStatisticsStore.IncrementFailedAsync(System.String,System.Int32)">
            <summary>
            失败计数
            </summary>
            <param name="ownerId"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.RedisStatisticsStore.StartAsync(System.String)">
            <summary>
            开始计数
            </summary>
            <param name="ownerId"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.RedisStatisticsStore.ExitAsync(System.String)">
            <summary>
            退出
            </summary>
            <param name="ownerId"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.RedisStatisticsStore.GetSpiderStatisticsAsync(System.String)">
            <summary>
            
            </summary>
            <param name="ownerId"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.RedisStatisticsStore.GetSpiderStatisticsListAsync(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="page"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.RedisStatisticsStore.IncrementDownloadSuccessAsync(System.String,System.Int32,System.Int64)">
            <summary>
            增量下载成功
            </summary>
            <param name="agentId"></param>
            <param name="count"></param>
            <param name="elapsedMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.RedisStatisticsStore.IncrementDownloadFailedAsync(System.String,System.Int32,System.Int64)">
            <summary>
            下载失败
            </summary>
            <param name="agentId"></param>
            <param name="count"></param>
            <param name="elapsedMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.RedisStatisticsStore.GetDownloadStatisticsListAsync(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="page"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.RedisStatisticsStore.GetDownloadStatisticsAsync(System.String)">
            <summary>
            
            </summary>
            <param name="agentId"></param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.Statistics.StatisticsBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="P:Sop.Spider.Statistics.StatisticsBuilder.Services">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sop.Spider.Statistics.StatisticsBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:Sop.Spider.Statistics.StatisticsCenter">
            <summary>
            统计服务中心
            </summary>
        </member>
        <member name="P:Sop.Spider.Statistics.StatisticsCenter.IsRunning">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sop.Spider.Statistics.StatisticsCenter.#ctor(Sop.Spider.EventBus.IEventBus,Sop.Spider.Common.SpiderOptions,Sop.Spider.Statistics.IStatisticsStore,Microsoft.Extensions.Logging.ILogger{Sop.Spider.Statistics.StatisticsCenter})">
            <summary>
            构造方法
            </summary>
            <param name="eventBus">消息队列接口</param>
            <param name="options"></param>
            <param name="statisticsStore">统计存储接口</param>
            <param name="logger">日志接口</param>
        </member>
        <member name="M:Sop.Spider.Statistics.StatisticsCenter.StopAsync(System.Threading.CancellationToken)">
            <summary>
            停止统计中心
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.Statistics.StatisticsService">
            <summary>
            统计服务
            </summary>
        </member>
        <member name="M:Sop.Spider.Statistics.StatisticsService.#ctor(Sop.Spider.EventBus.IEventBus,Sop.Spider.Common.SpiderOptions)">
            <summary>
            构造方法
            </summary>
            <param name="eventBus">消息队列接口</param>
            <param name="options"></param>
        </member>
        <member name="M:Sop.Spider.Statistics.StatisticsService.IncrementSuccessAsync(System.String)">
            <summary>
            增加成功次数 1
            </summary>
            <param name="ownerId">爬虫标识</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.StatisticsService.IncrementFailedAsync(System.String,System.Int32)">
            <summary>
            添加指定失败次数
            </summary>
            <param name="ownerId">爬虫标识</param>
            <param name="count">失败次数</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.StatisticsService.StartAsync(System.String)">
            <summary>
            设置爬虫启动时间
            </summary>
            <param name="ownerId">爬虫标识</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.StatisticsService.ExitAsync(System.String)">
            <summary>
            设置爬虫退出时间
            </summary>
            <param name="ownerId">爬虫标识</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.StatisticsService.IncrementDownloadSuccessAsync(System.String,System.Int32,System.Int64)">
            <summary>
            添加指定下载代理器的下载成功次数
            </summary>
            <param name="agentId">下载代理器标识</param>
            <param name="count">下载成功次数</param>
            <param name="elapsedMilliseconds">下载总消耗的时间</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.StatisticsService.IncrementDownloadFailedAsync(System.String,System.Int32,System.Int64)">
            <summary>
            添加指定下载代理器的下载失败次数
            </summary>
            <param name="agentId">下载代理器标识</param>
            <param name="count">下载失败次数</param>
            <param name="elapsedMilliseconds">下载总消耗的时间</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.StatisticsService.PrintStatisticsAsync(System.String)">
            <summary>
            打印统计信息(仅限本地爬虫使用)
            </summary>
            <param name="ownerId">爬虫标识</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Spider.Statistics.StatisticsService.IncrementTotalAsync(System.String,System.Int32)">
            <summary>
            添加总请求数
            </summary>
            <param name="ownerId">爬虫标识</param>
            <param name="count">请求数</param>
            <returns></returns>
        </member>
        <member name="T:Sop.Spider.Status">
            <summary>
            爬虫状态
            </summary>
        </member>
        <member name="F:Sop.Spider.Status.Running">
            <summary>
            正在运行
            </summary>
        </member>
        <member name="F:Sop.Spider.Status.Paused">
            <summary>
            暂停
            </summary>
        </member>
        <member name="F:Sop.Spider.Status.Exiting">
            <summary>
            退出中
            </summary>
        </member>
        <member name="F:Sop.Spider.Status.Exited">
            <summary>
            退出完成
            </summary>
        </member>
    </members>
</doc>
